import math

from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ChatAction

from aiogram import Bot, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state
from aiogram.fsm.storage.base import StorageKey

from core import *
from database import *
from filters import *
from keyboards import UserKeyboards as User_kb
from lexicon import *
from states import UserStates
import utils

config: Config = load_config('.env')

default = DefaultBotProperties(parse_mode='HTML')
bot: Bot = Bot(token=config.tg_bot.token, default=default)

router: Router = Router()

ADMIN_IDS = config.tg_bot.admin_ids


@router.message(Command('menu', 'start'), StateFilter(default_state))
async def start(message: Message, state: FSMContext):
    await bot.send_chat_action(message.from_user.id, ChatAction.TYPING)
    await message.answer(LEXICON['start_message'], reply_markup=User_kb.start_kb())
    await state.clear()

    if not get_user(message.from_user.id):
        user = message.from_user
        phone_number = None
        database.add_user(user.id, user.username, phone_number)


@router.callback_query(F.data == 'start_buy_button', StateFilter(default_state))
async def start_buy_button(callback: CallbackQuery):
    await callback.message.edit_text('—Ç–µ–∫—Å—Ç', reply_markup=User_kb.action_kb('show'))


@router.callback_query(F.data == 'start_sell_button', StateFilter(default_state))
async def start_sell_button(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å',
                                     reply_markup=User_kb.action_kb('sell'))


@router.callback_query(F.data == 'start_create_order_button', StateFilter(default_state))
async def start_create_order_button(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É',
                                     reply_markup=User_kb.action_kb('buy'))


@router.callback_query(F.data == 'start_autoposter_discord_button', StateFilter(default_state))
async def autoposter_discord_button(callback: CallbackQuery):
    await callback.message.edit_text('Soon..', reply_markup=User_kb.back_to_start_kb())


@router.callback_query(F.data == 'back_to_start', StateFilter(default_state))
async def back_to_start(callback: CallbackQuery):
    await callback.message.edit_text(LEXICON['start_message'], reply_markup=User_kb.start_kb())


@router.callback_query(F.data.startswith('virt_'), StateFilter(default_state))
async def handle_virt_callback(callback: CallbackQuery):
    action_type = callback.data.split('_')[-1]
    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type in ['buy', 'show'] else "–ø—Ä–æ–¥–∞—Ç—å"

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ {action_text} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É.",
                                     reply_markup=User_kb.game_kb('virt', action_type))


@router.callback_query(F.data.startswith('business_'), StateFilter(default_state))
async def handle_business_callback(callback: CallbackQuery):
    action_type = callback.data.split('_')[-1]
    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type in ['buy', 'show'] else "–ø—Ä–æ–¥–∞—Ç—å"

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ {action_text} –±–∏–∑–Ω–µ—Å",
                                     reply_markup=User_kb.game_kb('business', action_type))


@router.callback_query(F.data.startswith('account_'), StateFilter(default_state))
async def handle_business_callback(callback: CallbackQuery):
    action_type = callback.data.split('_')[-1]
    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type in ['buy', 'show'] else "–ø—Ä–æ–¥–∞—Ç—å"
    print(action_type, action_text)
    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ {action_text} –∞–∫–∫–∞—É–Ω—Ç.",
                                     reply_markup=User_kb.game_kb('account', action_type))


@router.callback_query(F.data.startswith('game_'), StateFilter(default_state))
async def game_callback_handler(callback: CallbackQuery, state: FSMContext):
    action_type = callback.data.split('_')[-1]
    game = callback.data.split('_')[1]
    item = callback.data.split('_')[2]
    projects_list = PROJECTS[game]

    await callback.message.edit_text('—Ç–µ–ø–µ—Ä—å –ø–∏–∫–Ω–∏ –ø—Ä–æ–µ–∫—Ç',
                                     reply_markup=User_kb.projects_kb(item, projects_list, action_type))

    await state.clear()


@router.callback_query(F.data.startswith('back_to_games_'), StateFilter(default_state))
async def back_to_games_callback(callback: CallbackQuery):
    item = callback.data.split('_')[-2]
    action_type = callback.data.split('_')[-1]
    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type in ['buy', 'show'] else "–ø—Ä–æ–¥–∞—Ç—å"

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ {action_text}",
                                     reply_markup=User_kb.game_kb(item, action_type))


@router.callback_query(F.data.startswith('project_'), StateFilter(default_state))
async def handle_project_callback(callback: CallbackQuery, state: FSMContext):
    item = callback.data.split('_')[1]
    project_name = callback.data.split('_')[2]
    action_type = callback.data.split('_')[-1]

    await utils.show_servers(callback, item, project_name, action_type)
    await state.clear()


@router.callback_query(F.data.startswith('back_to_projects_'), StateFilter(default_state))
async def handle_main_menu_callback(callback: CallbackQuery):
    _, _, _, item, game, action_type = callback.data.split('_')
    projects_list = PROJECTS[game]
    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type in ['buy', 'show'] else "–ø—Ä–æ–¥–∞—Ç—å"
    item_text = utils.get_item_text_projects(item)

    await callback.message.edit_text(
        text=LEXICON['choose_project'].format(action_text, item_text),
        reply_markup=User_kb.projects_kb(item, projects_list, action_type))


@router.callback_query(F.data.startswith('back_to_servers'), StateFilter(default_state))
async def back_to_servers_handler(callback: CallbackQuery):
    project_name = callback.data.split('_')[3]
    action_type = callback.data.split('_')[-1]

    await utils.show_servers(callback, 'virt', project_name, action_type)


@router.callback_query(F.data.startswith('back_to_'), StateFilter(default_state))
async def back_to_handler(callback: CallbackQuery):
    destination = callback.data.split('_')[-1]

    if destination == 'buy':
        await start_create_order_button(callback)
    elif destination == 'sell':
        await start_sell_button(callback)
    elif destination == 'show':
        await start_buy_button(callback)


@router.callback_query(F.data.startswith('server_'), ~F.data.endswith('show'), StateFilter(default_state))
async def handle_server_callback(callback: CallbackQuery, state: FSMContext):
    _, item, project_name, server_name, action_type = callback.data.split('_')
    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞—Ç—å"

    if item == 'virt':
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç {project_name}, —Å–µ—Ä–≤–µ—Ä {server_name}. "
            f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ {action_text}:",
            reply_markup=User_kb.amount_kb(project_name, server_name, action_type))
    elif item == 'business':
        await callback.message.edit_text(LEXICON['input_business_name'])
        await state.set_state(UserStates.input_business_name)
        await state.update_data({'project': project_name, 'server': server_name, 'action_type': action_type})
    elif item == 'account':
        await callback.message.edit_text(LEXICON['input_account_description'])
        await state.set_state(UserStates.input_account_description)
        await state.update_data({'project': project_name, 'server': server_name, 'action_type': action_type})


@router.callback_query(F.data.startswith('server_'), F.data.endswith('show'), StateFilter(default_state))
async def handle_server_show_callback(callback: CallbackQuery, state: FSMContext):
    _, item, project, server, _ = callback.data.split('_')

    await utils.show_orders(callback, state, item, project, server)


@router.callback_query(F.data.startswith('watch-other'))
async def watch_other_handler(callback: CallbackQuery, state: FSMContext):
    _, item, project, server, _ = callback.data.split('_')

    await utils.show_orders(callback, state, item, project, server, True, callback.data.split('_')[-1])


@router.callback_query(F.data.startswith('amount_'), StateFilter(default_state))
async def handle_amount_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    amount_value = callback.data.split('_')[1]

    if amount_value == 'custom':
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã:")
        await callback.message.delete()
    else:
        amount = int(amount_value)
        if amount < 500000 or amount > 1000000000000:
            await bot.send_message(user_id, "ü§ï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 500,000")
            return await callback.answer()

        action_type = callback.data.split('_')[-1]
        project = callback.data.split('_')[2]
        server = callback.data.split('_')[3]
        try:
            price_per_million = PRICE_PER_MILLION_VIRTS[project][action_type]
        except KeyError:
            price_per_million = 100
        cost = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000))

        action_text = '–ö—É–ø–∏—Ç—å' if action_type == 'buy' else '–ü—Ä–æ–¥–∞—Ç—å'

        confirm_text = (f"–í–∞—à –∑–∞–∫–∞–∑:\n"
                        f"‚îú –û–ø–µ—Ä–∞—Ü–∏—è: {action_text}\n"
                        f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n"
                        f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n"
                        f"‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤: {'{:,}'.format(amount)}\n\n"
                        f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {'{:,}'.format(cost)} —Ä—É–±.\n\n"
                        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?")
        await callback.message.edit_text(
            text=confirm_text,
            reply_markup=User_kb.confirmation_of_creation_kb('virt')
        )

    await callback.answer()


@router.message(StateFilter(UserStates.input_business_name))
async def business_name(message: Message, state: FSMContext):
    await message.answer(LEXICON['input_business_price'])
    data = await state.get_data()
    data['name'] = message.text
    await state.set_state(UserStates.input_business_price)
    await state.update_data(data)


@router.message(StateFilter(UserStates.input_business_price))
async def business_price(message: Message, state: FSMContext):
    try:
        price_ = int(message.text)
    except ValueError:
        return await message.answer(LEXICON['incorrect_price'])

    data = await state.get_data()
    await message.answer(
        text=LEXICON['confirm_text_business'].format(data['project'], data['server'], data['name'], price_),
        reply_markup=User_kb.confirmation_of_creation_kb('business')
    )
    await state.clear()


@router.message(StateFilter(UserStates.input_account_description))
async def account_description(message: Message, state: FSMContext):
    await message.answer(LEXICON['input_account_price'])
    data = await state.get_data()
    data['description'] = message.text
    await state.set_state(UserStates.input_account_price)
    await state.update_data(data)


@router.message(StateFilter(UserStates.input_account_price))
async def account_price(message: Message, state: FSMContext):
    try:
        price_ = int(message.text)
    except ValueError:
        return await message.answer(LEXICON['incorrect_price'])

    data = await state.get_data()
    await message.answer(
        text=LEXICON['confirm_text_account'].format(data['project'], data['server'], data['description'], price_),
        reply_markup=User_kb.confirmation_of_creation_kb('account')
    )
    await state.clear()


@router.callback_query(F.data.startswith('confirmation_of_creation_'), StateFilter(default_state))
async def handle_confirm_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    action_type = callback.data.split('_')[-1]

    if action_type == 'confirm':
        username = callback.from_user.username
        item = callback.data.split('_')[-2]

        if item == 'virt':
            data = utils.parse_message_virt(callback.message.text)
            if not data:
                return await callback.message.edit_text("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

            action_text, project, server, amount = data.values()
            action_text = 'sell' if action_text == '–ü—Ä–æ–¥–∞—Ç—å' else 'buy'
            order_id = add_order(user_id, username, action_text, item, project, server, amount)

            await callback.message.edit_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

            matched_order = match_orders(user_id, action_text, project, server, amount)
            if matched_order:
                matched_order_id, other_user_id = matched_order

                buyer_id = user_id if action_text == 'buy' else other_user_id
                seller_id = user_id if action_text == 'sell' else other_user_id
                buyer_order_id = order_id if action_text == 'buy' else matched_order_id
                seller_order_id = order_id if action_text == 'sell' else matched_order_id
                matched_orders_id = create_matched_order(buyer_id, buyer_order_id, seller_id, seller_order_id)

                await utils.notify_users_of_chat(bot, matched_orders_id, buyer_id, seller_id, order_id)

                database.update_order_status(buyer_order_id, 'matched')
                database.update_order_status(seller_order_id, 'matched')

        elif item == 'business':
            data = utils.parse_message_business(callback.message.text)
            if not data:
                return await callback.message.edit_text("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

            project, server, name, price_ = data.values()
            add_order(user_id, username, 'sell', item, project, server, price_, name)

            await callback.message.edit_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

        else:
            data = utils.parse_message_account(callback.message.text)
            if not data:
                return await callback.message.edit_text("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫...")

            project, server, description, price_ = data.values()
            add_order(user_id, username, 'sell', item, project, server, price_, description)

            await callback.message.edit_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    else:
        await callback.message.edit_text("üö´ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")


@router.callback_query(F.data.startswith('report_'), StateFilter(UserStates.in_chat))
async def report_callback(callback: CallbackQuery, state: FSMContext):
    if await state.get_data() == UserStates.waiting_for_problem_description:
        return await callback.answer()
    _, offender_id, order_id = callback.data.split('_')

    user_data.setdefault(callback.from_user.id, {})
    user_data[callback.from_user.id]['complaint'] = {}
    user_data[callback.from_user.id]['complaint']['offender_id'] = offender_id
    user_data[callback.from_user.id]['complaint']['order_id'] = order_id
    await state.set_state(UserStates.waiting_for_problem_description)

    await callback.message.answer('üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:')


@router.callback_query(F.data.startswith('confirmation_of_deal_'))
async def handle_chat_action_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    action = callback.data.split('_')[-1]
    chat_id = active_chats[user_id]
    buyer_id, seller_id = map(int, chat_id.split('_'))
    other_user_id = buyer_id if user_id == seller_id else seller_id

    if action == 'cancel':
        cancel_requests[chat_id][user_id] = True

        await bot.delete_message(user_id, callback.message.message_id)

        if user_id == seller_id:
            del active_chats[buyer_id]
            del active_chats[seller_id]

            await bot.send_message(buyer_id, "üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º.")
            await bot.send_message(seller_id, "üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

            buyer_state = FSMContext(storage, StorageKey(bot_id=7488450312, chat_id=buyer_id, user_id=buyer_id))
            seller_state = FSMContext(storage, StorageKey(bot_id=7488450312, chat_id=seller_id, user_id=seller_id))

            await buyer_state.clear()
            await seller_state.clear()

            try:
                await bot.delete_message(buyer_id, cancel_requests[chat_id]['buyer_message_id'])
            except Exception:
                pass
            del cancel_requests[chat_id]

            try:
                update_order_status(buyer_id, 'pending')
                update_order_status(seller_id, 'pending')
            except sqlite3.Error as e:
                print(f"Error updating order status to 'deleted': {e}")

        else:
            await bot.send_message(user_id, "‚ÄºÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.")
            await bot.send_message(other_user_id, "‚ÄºÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å "
                                                  "—Å–¥–µ–ª–∫—É, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É'.")

            if cancel_requests[chat_id][other_user_id]:
                del active_chats[buyer_id]
                del active_chats[seller_id]

                await bot.send_message(buyer_id, "üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                await bot.send_message(seller_id, "üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

                buyer_state = FSMContext(storage, StorageKey(bot_id=7488450312, chat_id=buyer_id, user_id=buyer_id))
                seller_state = FSMContext(storage, StorageKey(bot_id=7488450312, chat_id=seller_id, user_id=seller_id))

                await buyer_state.clear()
                await seller_state.clear()

                await bot.delete_message(seller_id, cancel_requests[chat_id]['seller_message_id'])
                del cancel_requests[chat_id]

                try:
                    update_order_status(buyer_id, 'pending')
                    update_order_status(seller_id, 'pending')
                except sqlite3.Error as e:
                    print(f"Error updating order status to 'deleted': {e}")

    elif action == 'confirm':
        if user_id == buyer_id:

            cancel_requests[chat_id][user_id] = True

            await bot.delete_message(buyer_id, callback.message.message_id)
            await bot.delete_message(seller_id, cancel_requests[chat_id]['seller_message_id'])

            await bot.send_message(buyer_id, "‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤–∞–º–∏.")
            await bot.send_message(seller_id, "‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–¥–µ–ª–∫—É. –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            try:
                update_order_status(buyer_id, 'confirmed')
                update_order_status(seller_id, 'confirmed')
            except sqlite3.Error as e:
                print(f"Error updating order status to 'confirmed': {e}")

            del active_chats[buyer_id]
            del active_chats[seller_id]
            del cancel_requests[chat_id]

            buyer_state = FSMContext(storage, StorageKey(bot_id=7488450312, chat_id=buyer_id, user_id=buyer_id))
            seller_state = FSMContext(storage, StorageKey(bot_id=7488450312, chat_id=seller_id, user_id=seller_id))

            await buyer_state.clear()
            await seller_state.clear()


@router.message(StateFilter(UserStates.in_chat))
async def handle_chat_message(message: Message):
    user_id = message.from_user.id
    chat_id = active_chats[user_id]
    buyer_id, seller_id = map(int, chat_id.split('_'))
    recipient_id = buyer_id if user_id == seller_id else seller_id

    bot_user_id = get_bot_user_id(user_id)
    save_chat_message(chat_id, user_id, recipient_id, message.text)

    await bot.send_message(recipient_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ID {bot_user_id}: {message.text}")


@router.message(Command('account'))
async def account_info(message: Message):
    user_id = message.from_user.id
    user_db_data = get_user(user_id)

    if user_db_data:
        user_id, tg_id, username, phone_number, balance, created_at = user_db_data
        account_info_text = f"–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n" \
                            f"‚îú –ë–∞–ª–∞–Ω—Å: {balance}\n" \
                            f"‚îú User ID: {user_id}\n" \
                            f"‚îú Username: {username}\n" \
                            f"‚îî –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ: {created_at}\n"

        await message.answer(account_info_text, reply_markup=User_kb.account_kb())

    else:
        await message.answer("‚ùî –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")


@router.callback_query(F.data == 'my_orders', StateFilter(default_state))
async def process_my_orders(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    orders = get_orders_by_user_id(user_id)

    if orders:
        orders_text = "–í–∞—à–∏ –æ—Ä–¥–µ—Ä–∞:\n\n"
        for order in orders:
            order_id, _, action, project, server, amount, status, created_at = order
            orders_text += f"‚îú ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n" \
                           f"‚îú –î–µ–π—Å—Ç–≤–∏–µ: {action}\n" \
                           f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n" \
                           f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n" \
                           f"‚îú –°—É–º–º–∞: {amount}\n" \
                           f"‚îú –°—Ç–∞—Ç—É—Å: {status}\n" \
                           f"‚îî –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"
    else:
        orders_text = "ü§ï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤."

    await callback_query.answer()
    await callback_query.message.answer(orders_text)


@router.message(Command('report'))
async def report_command(message: Message):
    await message.answer(LEXICON['report_message'], reply_markup=User_kb.report_kb())


@router.callback_query(F.data == 'write_ticket')
async def process_write_ticket_callback(callback: CallbackQuery, state: FSMContext):
    await bot.send_chat_action(callback.from_user.id, ChatAction.TYPING)

    if get_user_matched_orders(callback.from_user.id):
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∂–∞–ª–æ–±—É:",
                                      reply_markup=User_kb.cancel_kb())

        await state.set_state(UserStates.waiting_for_order_id)
        user_data.setdefault(callback.from_user.id, {})
        user_data[callback.from_user.id]['complaint'] = {}

    else:
        return await callback.message.edit_text('ü§ï –ü–æ—Ö–æ–∂–µ, —É –í–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫')


@router.message(StateFilter(UserStates.waiting_for_order_id))
async def process_order_id(message: Message, state: FSMContext):
    try:
        order_id = int(message.text.strip())
    except ValueError:
        return await message.answer("‚ùî –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–¥–µ–ª–∫—É —Å —Ç–∞–∫–∏–º ID, –º–æ–∂–µ—Ç –≤—ã –æ—à–∏–±–ª–∏—Å—å?")

    if not check_matched_order(order_id, message.from_user.id):
        return await message.answer("–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∫–∏ —Å –¥–∞–Ω–Ω—ã–º ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                                    reply_markup=User_kb.cancel_kb())

    user_data[message.from_user.id]['complaint']['order_id'] = order_id
    await state.set_state(UserStates.waiting_for_problem_description)

    await message.answer("–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑–ª–æ–∂–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:")


@router.callback_query(F.data == 'cancel_button', StateFilter(UserStates.waiting_for_problem_description))
async def cancel_callback(callback: CallbackQuery, state: FSMContext):
    await bot.send_chat_action(callback.from_user.id, ChatAction.TYPING)
    await state.clear()
    await callback.message.edit_text('‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω–∞')


@router.message(StateFilter(UserStates.waiting_for_problem_description))
async def process_problem_description(message: Message):
    complaint_text = message.text
    user_data[message.from_user.id]['complaint']['complaint_text'] = complaint_text

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=User_kb.send_report_kb())


@router.callback_query(F.data.in_(['send_ticket', 'cancel_ticket']))
async def process_ticket_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == 'send_ticket':
        try:
            order_id = user_data[callback.from_user.id]['complaint']['order_id']
            complaint = get_matched_order(order_id)
            complainer_id = callback.from_user.id
            offender_id = complaint[1] if complaint[1] != complainer_id else complaint[3]
            complaint = user_data[callback.from_user.id]['complaint']['complaint_text']
            create_report(order_id, complainer_id, offender_id, complaint)

            await callback.message.edit_text(
                "‚úÖ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            await state.clear()

            for admin_id in ADMIN_IDS:
                try:
                    await bot.send_message(admin_id, '‚ÄºÔ∏è –ü–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç\n/admin')
                except Exception as e:
                    print(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–π –∂–∞–ª–æ–±–µ: {str(e)}')

        except Exception as e:
            await callback.message.answer("‚ùî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø—Ä—è–º—É—é")
            print(e, datetime.datetime.now().time(), sep='\n')

    elif callback.data == 'cancel_ticket':
        user_data[callback.from_user.id]['complaint'] = {}
        await callback.message.edit_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞.")


@router.message(Command('help'), StateFilter(default_state))
async def help_command(message: Message):
    await message.answer(LEXICON['help_message'])


@router.message(Command('myorders'), StateFilter(default_state))
async def my_orders_command(message: Message):
    user_id = message.from_user.id
    orders = get_orders_by_user_id(user_id)

    if orders:
        orders_text = "–í–∞—à–∏ –æ—Ä–¥–µ—Ä–∞:\n\n"
        for order in orders:
            order_id, _, action, project, server, amount, status, created_at = order
            orders_text += f"‚îú ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n" \
                           f"‚îú –î–µ–π—Å—Ç–≤–∏–µ: {action}\n" \
                           f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n" \
                           f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n" \
                           f"‚îú –°—É–º–º–∞: {amount}\n" \
                           f"‚îú –°—Ç–∞—Ç—É—Å: {status}\n" \
                           f"‚îî–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"

        await message.answer(orders_text)
    else:
        await message.answer("‚ùî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤.")


@router.message(Command('support'))
async def support_command(message: Message):
    await message.answer(LEXICON['support_message'], reply_markup=User_kb.support_kb())


@router.callback_query(F.data == 'contact_support', StateFilter(default_state))
async def contact_support_handler(callback: CallbackQuery):
    await callback.message.edit_text('—Ç–µ–∫—Å—Ç')


@router.message(Command('info'), StateFilter(default_state))
async def info_command(message: Message):
    await message.answer(LEXICON['info_message'])


# @dp.callback_query(lambda query: query.data.startswith('watch-other_'))
# async def watch_other_callback(query: CallbackQuery):
#     user_id = query.from_user.id
#     _, project, server, watched_orders = query.data.split('_')
#     watched_orders = list(map(int, watched_orders.split('-')))
#     print(watched_orders)
#
#     kb = InlineKeyboardMarkup(row_width=1)
#     kb.add(InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å!", callback_data=f'buy_order_{str(watched_orders[-1])}'))
#     await query.message.edit_text(query.message.text, reply_markup=kb)
#
#     orders = get_pending_sell_orders(user_id, project, server)
#
#     if not orders:
#         return await query.message.edit_text("–í—ã—à–µ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
#
#     orders_num = 0
#     for order in orders:
#         order_id, user_id, username, action, project, server, amount, status, created_at = order
#
#         if order_id in watched_orders:
#             continue
#
#         price_per_million = PRICE_PER_MILLION_VIRTS[project]["buy"]
#         price = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) *
#                           (price_per_million / 1000000))
#
#         orders_text = ''
#
#         kb = InlineKeyboardMarkup(row_width=1)
#         kb.add(InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å!", callback_data=f'buy_order_{str(order_id)}'))
#
#         if orders_num == 4:
#             kb.add(InlineKeyboardButton(
#                 text='‚è¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë',
#                 callback_data=f'watch_other_{project}_{server}_{"-".join(user_data[user_id]["watched_orders"])}')
#             )
#             return await query.message.answer(orders_text, reply_markup=kb)
#
#         await query.message.answer(orders_text, reply_markup=kb)
#
#         watched_orders.append(order_id)
#         orders_num += 1
#
#
@router.callback_query(F.data.startswith('buy_order_'), StateFilter(default_state))
async def buy_order(callback: CallbackQuery):
    await callback.message.edit_text(
        text=callback.message.text + '\n\nü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã?',
        reply_markup=User_kb.buy_order_kb(callback.data.split('_')[-1])
    )


@router.callback_query(F.data.startswith('confirmation_of_buying_'), StateFilter(default_state))
async def confirmation_of_buying(callback: CallbackQuery):
    order_id = callback.data.split('_')[-1]
    buyer_id = callback.from_user.id
    seller_id = get_user_id_by_order(order_id)
    matched_orders_id = create_matched_order(buyer_id, 0, seller_id, int(order_id))

    await callback.message.edit_text(callback.message.text[:-13] + '‚úÖ –ù–∞—á–∞–ª—Å—è —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º')
    await utils.notify_users_of_chat(bot, matched_orders_id, buyer_id, seller_id, order_id)


# @dp.message(
#     lambda message: message.from_user.id in user_data and 'amount' not in user_data[
#         message.from_user.id] and '/orders' != message.text and message.from_user.id not in active_chats)
# async def handle_custom_amount(message: Message):
#     user_id = message.from_user.id
#     try:
#         amount = int(message.text.replace(".", "").replace(",", ""))
#         if amount < 500000 or amount > 1000000000000:
#             await message.answer("‚ùî –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã: 500.000 ")
#             return
#
#         user_data[user_id]['amount'] = amount
#
#         action_type = user_data[user_id]['action']
#         project = user_data[user_id]['project']
#         server = user_data[user_id]['server']
#
#         price_per_million = PRICE_PER_MILLION_VIRTS[project][action_type.lower()]
#         price = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) *
#                           (price_per_million / 1000000))
#
#         if action_type == 'buy':
#             action_text = "–ö—É–ø–∏—Ç—å"
#         elif action_type == 'sell':
#             action_text = "–ü—Ä–æ–¥–∞—Ç—å"
#         else:
#             action_text = ""
#
#         confirm_text = (f"–í–∞—à –∑–∞–∫–∞–∑:\n"
#                         f"‚îú –û–ø–µ—Ä–∞—Ü–∏—è: {action_text}\n"
#                         f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n"
#                         f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n"
#                         f"‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤: {'{:,}'.format(amount)}\n\n"
#                         f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {'{:,}'.format(price)} —Ä—É–±.\n\n"
#                         f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?")
#
#         await message.answer(confirm_text, reply_markup=kb.confirmation_of_creation_kb())
#     except ValueError:
#         await message.answer("‚ùî –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö —á–∏—Å–µ–ª, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


def todo() -> None:
    # TODO: –ø–æ—á–∏–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã (–∞–¥–º–∏–Ω—É –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞ 1 –∏ —Ç–æ—Ç –∂–µ Id –º–æ–≥—É—Ç –±—ã—Ç—å 2 —Ä–∞–∑–Ω—ã–µ –∂–∞–ª–æ–±—ã)

    # TODO: (–ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ /orders)
    #       /ordersbiz - –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞ => –≤—ã–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞
    #       /ordersacc - –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞, —Å–µ—Ä–≤–µ—Ä–∞ => –≤—ã–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞

    # TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å user id. –ù–∞ –æ–¥–∏–Ω –¢–ì –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç 1 user id.

    # TODO: /report
    #       ID –∑–∞–∫–∞–∑–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã –ø–æ–¥–∞–µ—Ç—Å—è –∂–∞–ª–æ–±–∞ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –æ—Ä–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç.
    #       (—ç—Ç–æ –Ω–µ ID order –Ω–µ –ø—É—Ç–∞–π!, —É –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å–≤–æ–π –æ—Ä–¥–µ—Ä id)
    #       –†–µ–ø–æ—Ä—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫ - –í–≤–æ–¥ ID –∑–∞–∫–∞–∑–∞, –≤–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    #       (–±–µ–∑ user id, –ø—Ä–∏ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è user id –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∑–∞–∫–∞–∑–µ)
    #       –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–π –∑–∞–∫–∞–∑ –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–ª –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ.

    # TODO: /admin
    #       –í–º–µ—Å—Ç–µ —Å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–≤–æ–¥–∏ user id –æ–±–æ–∏—Ö, –≤—ã–≤–æ–¥–∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞ –∏ –¥–æ–±–∞–≤—å –∫–Ω–æ–ø–∫–∏:
    #       –û—Ç–≤–µ—Ç–∏—Ç—å, –∑–∞–∫—Ä—ã—Ç—å, –∑–∞–±–∞–Ω–∏—Ç—å 1–¥,7–¥,30–¥, –Ω–∞–≤—Å–µ–≥–¥–∞,
    #       –ö–Ω–æ–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø–µ—Ä–µ–ø–∏—Å–∫–µ (—Å–¥–µ–ª–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –Ω–µ–µ),
    #       –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–≤–µ—Ç—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏. + –ö–Ω–æ–ø–∫–∏ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ–π.
    #       –° –∏–Ω—Ñ–æ–π –æ–± —Å–∞–º–æ–º –æ—Ä–¥–µ—Ä–µ, –æ–± –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø–µ—Ä–µ–ø–∏—Å–∫–∞.

    # TODO: support —É–≤–∏–¥–∏—à—å –≤ –õ–° (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –ì–ë)

    # TODO: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start /menu (–í–ê–ñ–ù–û! –¶–ï–ù–ê –î–õ–Ø –ü–û–ö–£–ü–ö–ò –ë–£–î–ï–¢ –í–´–®–ï –¶–ï–ù–´ –î–õ–Ø –ü–†–û–î–ê–ñ–ò –ù–ê 30%)
    #       –í—ã–≤–æ–¥–∏—Ç—Å—è –æ–¥–Ω–æ –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ - –ö—É–ø–∏—Ç—å –ü—Ä–æ–¥–∞—Ç—å –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
    #       (–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä Discord, –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    #       –ö—É–ø–∏—Ç—å - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ (/orders /ordersbiz /ordersacc) –í—ã–±–æ—Ä –ø–æ–∫—É–ø–∫–∏ —á–µ–≥–æ
    #       –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞, –ë–∏–∑–Ω–µ—Å, –ê–∫–∫–∞—É–Ω—Ç. –ò –¥–∞–ª–µ–µ –ø–æ –Ω–∞–∫–∞—Ç–∞–Ω–Ω–æ–π
    #       –ü—Ä–æ–¥–∞—Ç—å - —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞. –í—ã–±–æ—Ä –ø—Ä–æ–¥–∞–∂–∏ —á–µ–≥–æ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞, –ë–∏–∑–Ω–µ—Å, –ê–∫–∫–∞—É–Ω—Ç.
    #       –ë–∏–∑–Ω–µ—Å - –≤–≤–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ), —Ü–µ–Ω–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è), –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    #       –ê–∫–∫–∞—É–Ω—Ç - –≤–≤–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞, —Å–µ—Ä–≤–µ—Ä–∞, –æ–ø–∏—Å–∞–Ω–∏–µ(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ),
    #       —Ü–µ–Ω–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è), –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    #       –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ - –≤–≤–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞, —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

    # TODO: –ë–∞–ª–∞–Ω—Å, –ø–ª–∞—Ç–µ–∂–∫–∞

    # TODO: gmt +3

    # TODO: –ù—É–∂–Ω–æ –≤–µ–∑–¥–µ —Å–¥–µ–ª–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤–∏—Ä—Ç–∞–º. –ú–∏–Ω–∏–º—É–º 500000 –º–∞–∫—Å–∏–º—É–º 100000000000,
    #  –∏ —Ç–∞–∫ –∂–µ –ø–æ —Ü–µ–Ω–µ, –º–∏–Ω–∏–º—É–º 100 —Ä—É–±–ª–µ–π –º–∞–∫—Å–∏–º—É–º 1000000

    pass
