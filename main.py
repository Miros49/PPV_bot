import datetime
import logging
import asyncio
import sqlite3
import math

import database

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import StateFilter
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.callback_data import CallbackData
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.contrib.middlewares.logging import LoggingMiddleware

from database import *
from states import UserState
from utils import convert_datetime

admin_id = 853603010
logging.basicConfig(level=logging.INFO)

TOKEN = '7488450312:AAEdwH49J-QJ9xCRQvJz8qsNC1hesY_dFoI'

storage: MemoryStorage = MemoryStorage()

bot: Bot = Bot(token=TOKEN)
dp: Dispatcher = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

database.init_db()
action_cb = CallbackData('action', 'type')
project_cb = CallbackData('project', 'name')
server_cb = CallbackData('server', 'name')
orders_servers_cb = CallbackData('orders_servers', 'name')
main_menu_cb = CallbackData('main_menu', 'action')
amount_cb = CallbackData('amount', 'value')
orders_amount_cb = CallbackData('orders_amount', 'value')
confirm_cb = CallbackData('confirm', 'action')

GTA5RP_SERVERS = [
    'Downtown', 'Strawberry', 'Vinewood', 'Blackberry', 'inquad',
    'Sunrise', 'Rainbow', 'Richman', 'Eclipse', 'La Mesa', 'Burton',
    'Rockford', 'Alta', 'Del Perro', 'Davis', 'Harmony', 'Redwood',
    'Hawick', 'Grapeseed'
]

MAJESTIC_SERVERS = [
    'New York', 'Detroit', 'Chicago', 'San Francisco', 'Atlanta',
    'San Diego', 'Los Angeles', 'Miami', 'Las Vegas', 'Washington', 'Dallas'
]

RADMIR_SERVERS = ['1', '2', '3']

user_data = {}
user_states = {}
active_chats = {}
cancel_requests = {}

PRICE_PER_MILLION_VIRTS = {
    'GTA5RP': {'buy': 1600, 'sell': 1000},
    'Majestic': {'buy': 700, 'sell': 400},
    'Radmir GTA5': {'buy': 300, 'sell': 100}
}


@dp.message_handler(commands=['start'])
async def start(message: Message):
    user = message.from_user
    phone_number = None
    database.add_user(user.id, user.username, phone_number)
    await message.reply(
        "–Ø - –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω—É–∂–Ω—ã–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.\n\n"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫.\n"
        "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ  –≤–∞–ª—é—Ç—É –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –Ω–µ —É –º–µ–Ω—è, –∞ —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–∞–∫ –∂–µ —Ö–æ—Ç—è—Ç –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –ò –Ω–∞–æ–±–æ—Ä–æ—Ç.\n\n"
        "–Ø –ª–∏—à—å —Å–æ–∑–¥–∞—é —É—Å–ª–æ–≤–∏—è, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Å–¥–µ–ª–∫–∏ –∏ –∏—Å–∫–ª—é—á–∞—é –≤–∞—à—É –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—ã—Ç—å –æ–±–º–∞–Ω—É—Ç—ã–º."
    )

    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton(text="–ö—É–ø–∏—Ç—å –≤–∏—Ä—Ç—ã", callback_data=action_cb.new(type='buy')),
        InlineKeyboardButton(text="–ü—Ä–æ–¥–∞—Ç—å –≤–∏—Ä—Ç—ã", callback_data=action_cb.new(type='sell')),
        InlineKeyboardButton(text='—á—Ç–æ-—Ç–æ', callback_data='dfghjk,mv'),
        InlineKeyboardButton(text='few', callback_data='qwdqjh'),
        InlineKeyboardButton(text='few', callback_data='qwdqjh'),
        InlineKeyboardButton(text='few', callback_data='qwdqjh')
    ]
    keyboard.add(*buttons)

    await message.answer(
        "–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É –∏–ª–∏ –ø—Ä–æ–¥–∞–∂—É –¥–µ–π—Å—Ç–≤—É–π—Ç–µ –≤ —Ä–∞–º–∫–∞—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —è –±—É–¥—É –≤–∞–º –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å.\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.message_handler(lambda message: message.text == '/admin' and message.from_user.id in [admin_id, 922787101])
async def admin(message: Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(text="üì¢ –†–µ–ø–æ—Ä—Ç—ã", callback_data='admin_reports'),
        InlineKeyboardButton(text='üí∏ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏', callback_data='admin_transactions'),  # TODO: –¥–æ–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É
        InlineKeyboardButton(text='üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='admin_support'),  # TODO: –¥–æ–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É
        InlineKeyboardButton(text='‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='admin_information')  # TODO: –¥–æ–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É
    )

    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.username}! üòä', reply_markup=kb)


@dp.callback_query_handler(action_cb.filter(type=['buy', 'sell']))
async def handle_action_callback(callback: CallbackQuery, callback_data: dict):
    user_id = callback.from_user.id
    action_type = callback_data['type']
    user_data[user_id] = {'action': action_type}

    await callback.message.delete()

    if action_type == 'buy':
        action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏"
    elif action_type == 'sell':
        action_text = "–ø—Ä–æ–¥–∞—Ç—å"
    else:
        action_text = ""

    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton(text="GTA5RP", callback_data=project_cb.new(name='GTA5RP')),
        InlineKeyboardButton(text="Majestic", callback_data=project_cb.new(name='Majestic')),
        InlineKeyboardButton(text="Radmir GTA5", callback_data=project_cb.new(name='Radmir GTA5'))
    ]
    keyboard.add(*buttons)

    await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ {action_text} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É.",
                                  reply_markup=keyboard)
    await callback.answer()


@dp.callback_query_handler(project_cb.filter(name=['GTA5RP', 'Majestic', 'Radmir GTA5']))
async def handle_project_callback(query: types.CallbackQuery, callback_data: dict):
    user_id = query.from_user.id
    project_name = callback_data['name']
    action_type = user_data[user_id]['action']

    user_data[user_id]['project'] = project_name

    if project_name == 'GTA5RP':
        servers = GTA5RP_SERVERS
    elif project_name == 'Majestic':
        servers = MAJESTIC_SERVERS
    elif project_name == 'Radmir GTA5':
        servers = RADMIR_SERVERS
    else:
        await query.message.edit_text("–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await query.answer()
        return

    action_text = "–ø–æ–∫—É–ø–∫–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞–∂–∏"

    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=server, callback_data=server_cb.new(name=server)) for server in servers]
    keyboard.add(*buttons)

    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=main_menu_cb.new(action='main_menu')))

    await query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç {project_name}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è {action_text} –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã:",
        reply_markup=keyboard)
    await query.answer()


@dp.callback_query_handler(main_menu_cb.filter(action='main_menu'))
async def handle_main_menu_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    action_type = user_data[user_id]['action']

    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞—Ç—å"

    keyboard = InlineKeyboardMarkup(row_width=3)
    projects = ['GTA5RP', 'Majestic', 'Radmir GTA5']
    buttons = [InlineKeyboardButton(text=project, callback_data=project_cb.new(name=project)) for project in projects]
    keyboard.add(*buttons)

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ {action_text} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É.",
        reply_markup=keyboard)


@dp.callback_query_handler(server_cb.filter())
async def handle_server_callback(query: types.CallbackQuery, callback_data: dict):
    user_id = query.from_user.id
    server_name = callback_data['name']
    user_data[user_id]['server'] = server_name
    action_type = user_data[user_id]['action']
    project_name = user_data[user_id]['project']

    if server_name == '–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ':
        await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤:")
        await query.message.delete()
    else:
        keyboard = InlineKeyboardMarkup(row_width=2)
        buttons = [
            InlineKeyboardButton(text="1.000.000", callback_data=amount_cb.new(value='1000000')),
            InlineKeyboardButton(text="1.500.000", callback_data=amount_cb.new(value='1500000')),
            InlineKeyboardButton(text="2.000.000", callback_data=amount_cb.new(value='2000000')),
            InlineKeyboardButton(text="3.000.000", callback_data=amount_cb.new(value='3000000')),
            InlineKeyboardButton(text="5.000.000", callback_data=amount_cb.new(value='5000000')),
            InlineKeyboardButton(text="10.000.000", callback_data=amount_cb.new(value='10000000')),
            InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data=amount_cb.new(value='custom'))
        ]
        keyboard.add(*buttons)

        action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞—Ç—å"
        await query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç {project_name}, —Å–µ—Ä–≤–µ—Ä {server_name}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ {action_text}:",
            reply_markup=keyboard)
    await query.answer()


@dp.callback_query_handler(amount_cb.filter())
async def handle_amount_callback(query: types.CallbackQuery, callback_data: dict):
    user_id = query.from_user.id
    amount_value = callback_data['value']

    if amount_value == 'custom':
        await bot.send_message(query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã:")
        await query.message.delete()
    else:
        amount = int(amount_value)
        if amount < 500000 or amount > 1000000000000:
            await bot.send_message(user_id,
                                   "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 500,000")
            await query.answer()
            return

        user_data[user_id]['amount'] = amount

        action_type = user_data[user_id]['action']
        project = user_data[user_id]['project']
        server = user_data[user_id]['server']
        price_per_million = PRICE_PER_MILLION_VIRTS[project][action_type.lower()]
        price = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000))

        if action_type == 'buy':
            action_text = "–ö—É–ø–∏—Ç—å"
        elif action_type == 'sell':
            action_text = "–ü—Ä–æ–¥–∞—Ç—å"
        else:
            action_text = ""

        confirm_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n–î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n–ü—Ä–æ–µ–∫—Ç: {project}\n–°–µ—Ä–≤–µ—Ä: {server}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤: {'{:,}'.format(amount)}\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {'{:,}'.format(price)} —Ä—É–±.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"

        keyboard = InlineKeyboardMarkup(row_width=2)
        buttons = [
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_cb.new(action='confirm')),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=confirm_cb.new(action='cancel'))
        ]
        keyboard.add(*buttons)

        await query.message.edit_text(confirm_text, reply_markup=keyboard)

    await query.answer()


@dp.callback_query_handler(confirm_cb.filter(action=['confirm', 'cancel']),
                           lambda callback: callback.from_user.id not in active_chats)
async def handle_confirm_callback(callback: types.CallbackQuery, callback_data: dict):
    user_id = callback.from_user.id
    action = callback_data['action']

    if action == 'confirm':
        action = user_data[user_id]['action']
        project = user_data[user_id]['project']
        server = user_data[user_id]['server']
        amount = user_data[user_id]['amount']
        username = callback.from_user.username

        order_id = add_order(user_id, username, action, project, server, amount)

        matched_order = database.match_orders(user_id, action, project, server, amount)
        if matched_order:
            await callback.message.delete()

            matched_order_id, other_user_id = matched_order

            buyer_id = user_id if action == 'buy' else other_user_id
            seller_id = user_id if action == 'sell' else other_user_id
            buyer_order_id = order_id if action == 'buy' else matched_order_id
            seller_order_id = order_id if action == 'sell' else matched_order_id
            matched_orders_id = create_matched_order(buyer_id, buyer_order_id, seller_id, seller_order_id)

            await notify_users_of_chat(matched_orders_id, buyer_id, seller_id, order_id)

            database.update_order_status(order_id, 'matched')
            database.update_order_status(matched_order_id, 'matched')

        del user_data[user_id]

        await callback.message.edit_text("üü¢ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    else:
        del user_data[user_id]
        await callback.message.edit_text("üü• –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")

    await callback.answer()


async def send_order_info(matched_orders_id: int | str, buyer_id: int | str, seller_id: int | str, order_id: int | str):
    order = get_order(order_id=order_id)

    project = order[4]
    server = order[5]
    amount = int(order[6])

    order_ifo = ("‚ú≥Ô∏è <i><u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–¥–µ–ª–∫–µ:</u></i> ‚ú≥Ô∏è\n\n"
                 f"üÜî: <b>{str(matched_orders_id)}</b>\n"
                 "üõí –û–ø–µ—Ä–∞—Ü–∏—è: <i>{}</i>\n"
                 f"üë®‚Äçüíª –ü—Ä–æ–µ–∫—Ç: <b>{project}</b>\n"
                 f"üåÜ –°–µ—Ä–≤–µ—Ä: <b>{server}</b>\n"
                 f"üíµ –ö–æ–ª-–≤–æ –≤–∏—Ä—Ç–æ–≤: <code>{str(amount)}</code>\n\n"
                 "<b><u>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: {} —Ä—É–±</u></b>")

    price_per_million = PRICE_PER_MILLION_VIRTS[project]["buy"]
    price = str(math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000)))

    await bot.send_message(buyer_id, order_ifo.format('–ü–æ–∫—É–ø–∫–∞', price), parse_mode='HTML')

    price_per_million = PRICE_PER_MILLION_VIRTS[project]["sell"]
    price = str(math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000)))

    await bot.send_message(seller_id, order_ifo.format('–ü—Ä–æ–¥–∞–∂–∞', price), parse_mode='HTML')


async def notify_users_of_chat(matched_orders_id: int | str, buyer_id: int | str, seller_id: int | str,
                               order_id: int | str):
    chat_id = f"{buyer_id}_{seller_id}"
    active_chats[buyer_id] = chat_id
    active_chats[seller_id] = chat_id

    cancel_requests[chat_id] = {buyer_id: False, seller_id: False}

    buyer_message = "‚≠ïÔ∏è –ú—ã –Ω–∞—à–ª–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º."
    seller_message = "‚≠ïÔ∏è –ú—ã –Ω–∞—à–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —á–∞—Ç —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º."

    await bot.send_message(buyer_id, buyer_message)
    await bot.send_message(seller_id, seller_message)

    await send_order_info(matched_orders_id, buyer_id, seller_id, order_id)

    buyer_keyboard = InlineKeyboardMarkup(row_width=2)
    buyer_keyboard.row(
        InlineKeyboardButton(text="üì¢ –†–µ–ø–æ—Ä—Ç", callback_data=f'report_{str(seller_id)}_{str(matched_orders_id)}'))
    buyer_keyboard.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=confirm_cb.new(action='confirm_')),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=confirm_cb.new(action='cancel_'))
    )

    seller_keyboard = InlineKeyboardMarkup(row_width=1)
    seller_keyboard.add(
        InlineKeyboardButton(text="üì¢ –†–µ–ø–æ—Ä—Ç", callback_data=f'report_{str(buyer_id)}_{str(matched_orders_id)}'),
        InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É", callback_data=confirm_cb.new(action='cancel_'))
    )

    action_message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    message_buyer = await bot.send_message(buyer_id, action_message, reply_markup=buyer_keyboard)
    message_seller = await bot.send_message(seller_id, action_message, reply_markup=seller_keyboard)

    cancel_requests[chat_id]['buyer_message_id'] = message_buyer.message_id
    cancel_requests[chat_id]['seller_message_id'] = message_seller.message_id


@dp.callback_query_handler(lambda callback: callback.data.startswith('report_'))
async def report_callback(callback: CallbackQuery, state: FSMContext):
    if await state.get_state() == UserState.waiting_for_problem_description:
        return await callback.answer()
    _, offender_id, order_id = callback.data.split('_')

    user_data.setdefault(callback.from_user.id, {})
    user_data[callback.from_user.id]['complaint'] = {}
    user_data[callback.from_user.id]['complaint']['offender_id'] = offender_id
    user_data[callback.from_user.id]['complaint']['order_id'] = order_id
    user_states[callback.from_user.id] = 'waiting_for_problem_description'
    await state.set_state(UserState.waiting_for_problem_description)

    await callback.message.answer('üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:')


@dp.callback_query_handler(confirm_cb.filter(action=['confirm_', 'cancel_']))
async def handle_chat_action_callback(query: types.CallbackQuery, callback_data: dict):
    user_id = query.from_user.id
    action = callback_data['action']
    chat_id = active_chats[user_id]
    buyer_id, seller_id = map(int, chat_id.split('_'))
    other_user_id = buyer_id if user_id == seller_id else seller_id

    if action == 'cancel_':
        cancel_requests[chat_id][user_id] = True

        await bot.delete_message(user_id, query.message.message_id)

        if user_id == seller_id:

            await bot.send_message(buyer_id, "üü• –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º.")
            await bot.send_message(seller_id, "üü• –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

            await bot.delete_message(buyer_id, cancel_requests[chat_id]['buyer_message_id'])

            try:
                update_order_status(buyer_id, 'deleted')
                update_order_status(seller_id, 'deleted')
            except sqlite3.Error as e:
                print(f"Error updating order status to 'deleted': {e}")

            del active_chats[buyer_id]
            del active_chats[seller_id]
            del cancel_requests[chat_id]
        else:

            await bot.send_message(user_id, "‚≠ïÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.")
            await bot.send_message(other_user_id,
                                   "‚≠ïÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É'.")

            if cancel_requests[chat_id][other_user_id]:
                await bot.send_message(buyer_id, "üü• –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                await bot.send_message(seller_id, "üü• –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

                await bot.delete_message(seller_id, cancel_requests[chat_id]['seller_message_id'])

                try:
                    update_order_status(buyer_id, 'deleted')
                    update_order_status(seller_id, 'deleted')
                except sqlite3.Error as e:
                    print(f"Error updating order status to 'deleted': {e}")

                del active_chats[buyer_id]
                del active_chats[seller_id]
                del cancel_requests[chat_id]

    elif action == 'confirm_':
        if user_id == buyer_id:

            cancel_requests[chat_id][user_id] = True

            await bot.delete_message(buyer_id, query.message.message_id)
            await bot.delete_message(seller_id, cancel_requests[chat_id]['seller_message_id'])

            await bot.send_message(buyer_id, "üü¢ –°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤–∞–º–∏.")
            await bot.send_message(seller_id, "üü¢ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–¥–µ–ª–∫—É. –ü–µ—Ä–µ–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            try:
                update_order_status(buyer_id, 'confirmed')
                update_order_status(seller_id, 'confirmed')
            except sqlite3.Error as e:
                print(f"Error updating order status to 'confirmed': {e}")

            del active_chats[buyer_id]
            del active_chats[seller_id]
            del cancel_requests[chat_id]


@dp.message_handler(lambda message: message.from_user.id in active_chats and
                                    message.text not in ['/support', '/report'] and
                                    user_states.get(message.from_user.id) not in
                                    ['waiting_for_user_id', 'waiting_for_order_id', 'waiting_for_problem_description'])
async def handle_chat_message(message: types.Message):
    user_id = message.from_user.id
    chat_id = active_chats[user_id]
    buyer_id, seller_id = map(int, chat_id.split('_'))
    recipient_id = buyer_id if user_id == seller_id else seller_id

    conn = sqlite3.connect('database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE user_id=?", (user_id,))
    bot_user_id = cursor.fetchone()[0]
    conn.close()

    save_chat_message(chat_id, user_id, recipient_id, message.text)

    await bot.send_message(recipient_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ID {bot_user_id}: {message.text}")


@dp.message_handler(commands=['account'])
async def account_info(message: Message):
    user_id = message.from_user.id
    user_data = get_user(user_id)

    if user_data:
        user_id, tg_id, username, phone_number, ballance, created_at = user_data
        account_info_text = f"–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n" \
                            f"–ë–∞–ª–∞–Ω—Å: {ballance}\n" \
                            f"User ID: {user_id}\n" \
                            f"Username: {username}\n" \
                            f"Telegram ID: {tg_id}\n" \
                            f"–î–∞—Ç–∞ –∑–∞—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞: {created_at}\n"

        buttons = [
            InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="top_up_balance"),
            InlineKeyboardButton(text="–ú–æ–∏ –æ—Ä–¥–µ—Ä–∞", callback_data="my_orders")
        ]
        keyboard = InlineKeyboardMarkup().add(*buttons)

        await message.answer(account_info_text, reply_markup=keyboard)
    else:
        await message.answer("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")


@dp.callback_query_handler(lambda query: query.data == 'top_up_balance',
                           lambda query: query.from_user.id not in active_chats)
async def process_top_up_balance(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...")


@dp.callback_query_handler(lambda query: query.data == 'my_orders')
async def process_my_orders(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    orders = get_orders_by_user_id(user_id)

    if orders:
        orders_text = "–í–∞—à–∏ –æ—Ä–¥–µ—Ä–∞:\n\n"
        for order in orders:
            order_id, _, action, project, server, amount, status, created_at = order
            orders_text += f"ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n" \
                           f"–î–µ–π—Å—Ç–≤–∏–µ: {action}\n" \
                           f"–ü—Ä–æ–µ–∫—Ç: {project}\n" \
                           f"–°–µ—Ä–≤–µ—Ä: {server}\n" \
                           f"–°—É–º–º–∞: {amount}\n" \
                           f"–°—Ç–∞—Ç—É—Å: {status}\n" \
                           f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"
    else:
        orders_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤."

    await callback_query.answer()
    await callback_query.message.answer(orders_text)


@dp.message_handler(commands=['report'])
async def report_command(message: Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    write_ticket_button = types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å —Ç–∏–∫–µ—Ç", callback_data="write_ticket")
    my_tickets_button = types.InlineKeyboardButton(text="–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã", callback_data="my_tickets")
    keyboard.add(write_ticket_button, my_tickets_button)

    report_text = "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–±–µ—Ä–∏—Ç–µ '–ù–∞–ø–∏—Å–∞—Ç—å —Ç–∏–∫–µ—Ç'.\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–ú–æ–∏ —Ç–∏–∫–µ—Ç—ã'."

    await message.answer(report_text, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data == 'write_ticket')
async def process_write_ticket_callback(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º), –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç:")

    user_states[callback.from_user.id] = 'waiting_for_user_id'
    await state.set_state(UserState.waiting_for_user_id)

    user_data.setdefault(callback.from_user.id, {})
    user_data[callback.from_user.id]['complaint'] = {}


@dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'waiting_for_user_id')
# @dp.callback_query_handler(StateFilter(dp, UserState.waiting_for_user_id))
async def process_user_id(message: Message, state: FSMContext):
    try:
        user_id = int(message.text.strip())
    except ValueError:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º).")

    offender_id = get_user_id_by_id(user_id)

    if not offender_id:
        return await message.answer("ü§ï –ü–æ—Ö–æ–∂–µ, —á—Ç–æ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")

    user_data[message.from_user.id]['complaint']['offender_id'] = offender_id
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∏–∫–µ—Ç:")

    user_states[message.from_user.id] = 'waiting_for_order_id'
    await state.set_state(UserState.waiting_for_order_id)


# @dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'waiting_for_order_id')
@dp.message_handler(StateFilter(dp, UserState.waiting_for_order_id))
async def process_order_id(message: Message, state: FSMContext):
    try:
        order_id = int(message.text.strip())
    except ValueError:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º).")

    if not check_matched_order(order_id, message.from_user.id):
        return await message.answer(
            "–ü–æ—Ö–æ–∂–µ, —É –í–∞—Å –Ω–µ –±—ã–ª–æ —Ç–∞–∫–æ–π —Å–¥–µ–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")  # TODO: –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –æ—Ç—Å—é–¥–∞

    user_data[message.from_user.id]['complaint']['order_id'] = order_id

    await message.answer("–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑–ª–æ–∂–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:")

    user_states[message.from_user.id] = 'waiting_for_problem_description'
    await state.set_state(UserState.waiting_for_problem_description)


# @dp.message_handler(lambda message: user_states.get(message.from_user.id) == 'waiting_for_problem_description')
@dp.message_handler(StateFilter(dp, UserState.waiting_for_problem_description))
async def process_problem_description(message: types.Message):
    complaint_text = message.text
    user_data[message.from_user.id]['complaint']['complaint_text'] = complaint_text

    keyboard = types.InlineKeyboardMarkup()
    send_ticket_button = types.InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç", callback_data="send_ticket")
    cancel_ticket_button = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å —Ç–∏–∫–µ—Ç", callback_data="cancel_ticket")
    keyboard.add(send_ticket_button, cancel_ticket_button)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data in ['send_ticket', 'cancel_ticket'])
async def process_ticket_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data == 'send_ticket':
        try:
            order_id = user_data[callback.from_user.id]['complaint']['order_id']
            complainer_id = callback.from_user.id
            offender_id = user_data[callback.from_user.id]['complaint']['offender_id']
            complaint = user_data[callback.from_user.id]['complaint']['complaint_text']
            create_report(order_id, complainer_id, offender_id, complaint)

            await callback.message.edit_text(
                "‚úÖ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            user_states[callback.from_user.id] = {}
            await state.clear()

            await bot.send_message(admin_id, '‚ÄºÔ∏è –ü–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç\n/admin')
            await bot.send_message(922787101, '‚ÄºÔ∏è –ü–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç\n/admin')

        except Exception as e:
            await callback.message.answer("ü§ï –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø—Ä—è–º—É—é")
            print(e, datetime.datetime.now().time(), sep='\n')

    elif callback.data == 'cancel_ticket':
        user_data[callback.from_user.id]['complaint'] = {}
        await callback.message.edit_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞.")


@dp.message_handler(commands=['help'])
async def help_command(message: types.Message):
    help_text = """
    –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–± –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏.

    –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
    /help - –í—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    /report - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å —Ç–∏–∫–µ—Ç" –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã.
    2. –°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑–∞.
    3. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –æ–±–æ–∏—Ö ID –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.

    –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    await message.answer(help_text)


@dp.message_handler(commands=['myorders'])
async def my_orders_command(message: Message):
    user_id = message.from_user.id
    orders = get_orders_by_user_id(user_id)

    if orders:
        orders_text = "–í–∞—à–∏ –æ—Ä–¥–µ—Ä–∞:\n\n"
        for order in orders:
            order_id, _, action, project, server, amount, status, created_at = order
            orders_text += f"ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n" \
                           f"–î–µ–π—Å—Ç–≤–∏–µ: {action}\n" \
                           f"–ü—Ä–æ–µ–∫—Ç: {project}\n" \
                           f"–°–µ—Ä–≤–µ—Ä: {server}\n" \
                           f"–°—É–º–º–∞: {amount}\n" \
                           f"–°—Ç–∞—Ç—É—Å: {status}\n" \
                           f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"

        await message.answer(orders_text)
    else:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤.")


@dp.message_handler(commands=['support'])
async def support_command(message: types.Message):
    support_info = "–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n" \
                   "Email: support@example.com\n" \
                   "–¢–µ–ª–µ—Ñ–æ–Ω: +1234567890\n" \
                   "Telegram: @support_username\n"

    await message.answer(support_info)


@dp.message_handler(commands=['info'])
async def info_command(message: types.Message):
    bot_info = "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∏ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n" \
               "–û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏ –∏ —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."

    await message.answer(bot_info)


@dp.message_handler(commands=['orders'])
async def orders_command(message: types.Message):
    user_data[message.from_user.id]: dict = {}
    user_data[message.from_user.id]['watched_orders']: list = []
    keyboard = InlineKeyboardMarkup(row_width=3)
    buttons = [
        InlineKeyboardButton(text="GTA5RP", callback_data=project_cb.new(name='GTA5RP_orders')),
        InlineKeyboardButton(text="Majestic", callback_data=project_cb.new(name='Majestic_orders')),
        InlineKeyboardButton(text="Radmir GTA5", callback_data=project_cb.new(name='Radmir GTA5_orders'))
    ]
    keyboard.add(*buttons)

    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç", reply_markup=keyboard)


@dp.callback_query_handler(project_cb.filter(name=['GTA5RP_orders', 'Majestic_orders', 'Radmir GTA5_orders']))
async def handle_project_orders_callback(query: types.CallbackQuery, callback_data: dict):
    user_id = query.from_user.id
    project_name: str = callback_data['name']

    user_data[user_id] = {}
    user_data[user_id]['project'] = project_name.split('_')[0]

    if project_name == 'GTA5RP_orders':
        servers = GTA5RP_SERVERS
    elif project_name == 'Majestic_orders':
        servers = MAJESTIC_SERVERS
    elif project_name == 'Radmir GTA5_orders':
        servers = RADMIR_SERVERS
    else:
        return await query.message.edit_text("–û—à–∏–±–∫–∞: –ø—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=server, callback_data=orders_servers_cb.new(name=server)) for server in
               servers]
    keyboard.add(*buttons)

    keyboard.add(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=main_menu_cb.new(action='back_to_projects_orders')))

    await query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç {project_name.split('_')[0]}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä",
        reply_markup=keyboard)
    await query.answer()


@dp.callback_query_handler(main_menu_cb.filter(action='back_to_projects_orders'))
async def handle_orders_back_to_projects_callback(query: types.CallbackQuery):
    keyboard = InlineKeyboardMarkup(row_width=3)
    projects = ['GTA5RP', 'Majestic', 'Radmir GTA5']
    buttons = [InlineKeyboardButton(text=project, callback_data=project_cb.new(name=f'{project}_orders')) for project in
               projects]
    keyboard.add(*buttons)

    await query.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç", reply_markup=keyboard)


@dp.callback_query_handler(orders_servers_cb.filter())
async def handle_orders_server_callback(query: types.CallbackQuery, callback_data: dict):
    user_id = query.from_user.id
    server = callback_data['name']
    project = user_data[user_id]['project']

    orders = get_pending_sell_orders(user_id, project, server)

    if not orders:
        return await query.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –µ—â—ë –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É, "
                                             "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏—Ö –¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º üò¢")
    await query.message.delete()

    watched_orders = []
    orders_num = 0
    for order in orders:
        order_id, user_id, username, action, project, server, amount, status, created_at = order

        price_per_million = PRICE_PER_MILLION_VIRTS[project]["buy"]
        price = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000))

        # orders_text = f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n\n" \
        orders_text = f"üõí –û–ø–µ—Ä–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–∂–∞\n" \
                      f"üë®‚Äçüíª –ü—Ä–æ–µ–∫—Ç: {project}\n" \
                      f"üåÜ –°–µ—Ä–≤–µ—Ä: {server}\n" \
                      f"üíµ –ö–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã: {math.ceil(amount)}\n" \
                      f"‚åöÔ∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {convert_datetime(created_at)}\n\n" \
                      f"–¶–µ–Ω–∞: {price}—Ä—É–±"

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å!", callback_data=f'buy_order_{str(order_id)}'))

        watched_orders.append(order_id)

        if orders_num == 4:
            kb.add(InlineKeyboardButton(
                text='‚è¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë',
                callback_data=f'watch-other_{project}_{server}_{"-".join([str(el) for el in watched_orders])}')
            )
            return await query.message.answer(orders_text, reply_markup=kb)

        await query.message.answer(orders_text, reply_markup=kb)

        orders_num += 1


@dp.callback_query_handler(lambda query: query.data.startswith('watch-other_'))
async def watch_other_callback(query: CallbackQuery):
    user_id = query.from_user.id
    _, project, server, watched_orders = query.data.split('_')
    watched_orders = list(map(int, watched_orders.split('-')))
    print(watched_orders)

    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å!", callback_data=f'buy_order_{str(watched_orders[-1])}'))
    await query.message.edit_text(query.message.text, reply_markup=kb)

    orders = get_pending_sell_orders(user_id, project, server)

    if not orders:
        return await query.message.edit_text("–ù–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–¥–æ–±–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ üò¢")

    orders_num = 0
    for order in orders:
        order_id, user_id, username, action, project, server, amount, status, created_at = order

        if order_id in watched_orders:
            continue

        price_per_million = PRICE_PER_MILLION_VIRTS[project]["buy"]
        price = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000))

        orders_text = f"üÜî ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n\n" \
                      f"üõí –û–ø–µ—Ä–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–∂–∞\n" \
                      f"üë®‚Äçüíª –ü—Ä–æ–µ–∫—Ç: {project}\n" \
                      f"üåÜ –°–µ—Ä–≤–µ—Ä: {server}\n" \
                      f"üíµ –ö–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã: {math.ceil(amount)}\n" \
                      f"‚åöÔ∏è –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {convert_datetime(created_at)}\n\n" \
                      f"–¶–µ–Ω–∞: {price}—Ä—É–±"

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å!", callback_data=f'buy_order_{str(order_id)}'))

        if orders_num == 4:
            kb.add(InlineKeyboardButton(
                text='‚è¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë',
                callback_data=f'watch_other_{project}_{server}_{"-".join(user_data[user_id]["watched_orders"])}')
            )
            return await query.message.answer(orders_text, reply_markup=kb)

        await query.message.answer(orders_text, reply_markup=kb)

        watched_orders.append(order_id)
        orders_num += 1


@dp.callback_query_handler(lambda query: query.data.startswith('buy_order_'),
                           lambda query: query.from_user.id not in active_chats)
async def buy_order(query: CallbackQuery):
    kb = InlineKeyboardMarkup(row_width=1)
    kb.add(InlineKeyboardButton(text="ü§ù –î–∞, –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º",
                                callback_data=f'confirmation_of_buying_{str(query.data.split("_")[-1])}'))
    await query.message.edit_text(query.message.text + '\n\nü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=kb)


@dp.callback_query_handler(lambda query: query.data.startswith('confirmation_of_buying_'),
                           lambda query: query.from_user.id not in active_chats)
async def confirmation_of_buying(callback: CallbackQuery):
    order_id = callback.data.split('_')[-1]
    buyer_id = callback.from_user.id
    seller_id = get_user_id_by_order(order_id)
    matched_orders_id = create_matched_order(buyer_id, 0, seller_id, order_id)

    await callback.message.edit_text(callback.message.text[:-13] + '‚úÖ –ù–∞—á–∞–ª—Å—è —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º')
    await notify_users_of_chat(matched_orders_id, buyer_id, seller_id, order_id)

    # TODO: –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏
    # TODO: FSM!!!


@dp.callback_query_handler(
    lambda callback: callback.data == 'admin_reports' and callback.from_user.id in [admin_id, 922787101])
async def admin_reports(callback: CallbackQuery):
    complaints = get_open_reports()
    if not complaints:
        return await callback.message.edit_text("‚úÖ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±")
    await callback.message.delete()

    for complaint in complaints:
        complaint_id, order_id, complainer_id, offender_id, complaint_text = complaint

        complainer = get_user(complainer_id)
        offender = get_user(offender_id)

        complainer_username = f'@{complainer[2]}' if complainer[2] else '<b>–Ω–µ—Ç —Ç–µ–≥–∞</b>'
        offender_username = f'@{offender[2]}' if offender[2] else '<b>–Ω–µ—Ç —Ç–µ–≥–∞</b>'

        text = (f'üìã <i><u>–†–µ–ø–æ—Ä—Ç –ø–æ –∑–∞–∫–∞–∑—É: {str(order_id)}</u></i>\n\n'
                f'üë§ –ê–≤—Ç–æ—Ä: {complainer_username} (<code>{complainer_id}</code>)\n'
                f'üí¢ –ñ–∞–ª—É–µ—Ç—Å—è –Ω–∞: {offender_username} (<code>{offender_id}</code>)\n\n'
                f'<b>üìù –ü—Ä–∏—á–∏–Ω–∞:</b>\n{complaint_text}')

        kb = InlineKeyboardMarkup(row_width=1)
        kb.add(InlineKeyboardButton(text='–í–º–µ—à–∞—Ç—å—Å—è', callback_data=f'reply_to_report_{str(complaint_id)}'))

        await callback.message.answer(text, reply_markup=kb, parse_mode='HTML')


@dp.callback_query_handler(lambda callback: callback.data.startswith('reply_to_report_'))
async def reply_to_report(callback: CallbackQuery):
    report_id, order_id, complainer_id, offender_id, complaint, _, created_at = get_report(callback.data.split('_')[-1])

    await callback.message.answer('–î–æ–ø–∏—à–∏ –≤ 906 —Å—Ç—Ä–æ—á–∫–µ –∫–æ–¥–∞')


@dp.message_handler(
    lambda message: message.from_user.id in user_data and 'amount' not in user_data[
        message.from_user.id] and '/orders' != message.text and message.from_user.id not in active_chats)
async def handle_custom_amount(message: types.Message):
    user_id = message.from_user.id
    try:
        amount = int(message.text.replace(".", "").replace(",", ""))
        if amount < 500000 or amount > 1000000000000:
            await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã: 500.000 ")
            return

        user_data[user_id]['amount'] = amount

        action_type = user_data[user_id]['action']
        project = user_data[user_id]['project']
        server = user_data[user_id]['server']

        price_per_million = PRICE_PER_MILLION_VIRTS[project][action_type.lower()]
        price = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000))

        if action_type == 'buy':
            action_text = "–ö—É–ø–∏—Ç—å"
        elif action_type == 'sell':
            action_text = "–ü—Ä–æ–¥–∞—Ç—å"
        else:
            action_text = ""

        confirm_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n–î–µ–π—Å—Ç–≤–∏–µ: {action_text}\n–ü—Ä–æ–µ–∫—Ç: {project}\n–°–µ—Ä–≤–µ—Ä: {server}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤: {'{:,}'.format(amount)}\n\n–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {'{:,}'.format(price)} —Ä—É–±.\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?"

        keyboard = InlineKeyboardMarkup(row_width=2)
        buttons = [
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_cb.new(action='confirm')),
            InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=confirm_cb.new(action='cancel'))
        ]
        keyboard.add(*buttons)

        await message.answer(confirm_text, reply_markup=keyboard)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤.")


def todo() -> None:
    # TODO: –≤—ã–≤–æ–¥ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—É –ø—Ä–æ–µ–∫—Ç
    # TODO: –≤—ã–≤–æ–¥ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –ø—Ä–æ–µ–∫—Ç, —Å–µ—Ä–≤–µ—Ä

    # TODO: –∫–Ω–æ–ø–∫–∞ "–ø—Ä–æ–¥–∞–≤—Ç—å" –≤ –º–µ–Ω—é, –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è –ø—Ä–æ–¥–∞–∂—É –≤–∏—Ä—Ç—ã, –±–∏–∑–Ω–µ—Å–∞ –∏ –∞–∫–∫–∞—É–Ω—Ç–∞

    # TODO: –∫–Ω–æ–ø–∫–∞ "—Å–æ–∑–∞—Ç—å –∑–∞–∫–∞–∑" –∫—É–ø–∏—Ç—å –∏ –ø—Ä–æ–¥–∞—Ç—å –≤–∏—Ä—Ç—É, –±–∏–∑–Ω–µ—Å –∏–ª–∏ –∞–∫–∫–∞—É–Ω—Ç
    pass


if __name__ == '__main__':  # TODO: –ø–æ—á–∏–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã (–∞–¥–º–∏–Ω—É –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞ 1 –∏ —Ç–æ—Ç –∂–µ Id –º–æ–≥—É—Ç –±—ã—Ç—å 2 —Ä–∞–∑–Ω—ã–µ –∂–∞–ª–æ–±—ã)
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)


