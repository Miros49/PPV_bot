import asyncio
import logging
import math

from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage

from aiogram import Bot, Dispatcher  # , F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart  # , StateFilter

from core import Config, load_config
from database import *
from keyboards import *
from lexicon import *
# from states import UserState
# from utils import convert_datetime

logging.basicConfig(level=logging.INFO)
config: Config = load_config('.env')

storage = MemoryStorage()
default = DefaultBotProperties(parse_mode='HTML')

bot: Bot = Bot(token=config.tg_bot.token, default=default)
dp: Dispatcher = Dispatcher(storage=storage)

kb = UserKeyboards()
admin_kb = AdminKeyboards()

admin_ids = config.tg_bot.admin_ids

user_data = {}
user_states = {}
active_chats = {}
cancel_requests = {}


@dp.message(CommandStart() or Command('menu'))
async def start(message: Message):
    await message.answer(LEXICON['start_message'], reply_markup=kb.start_kb())

    if not get_user(message.from_user.id):
        user = message.from_user
        phone_number = None
        database.add_user(user.id, user.username, phone_number)


@dp.callback_query(lambda callback: callback.data == 'start_buy_button')
async def start_buy_button(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏', reply_markup=kb.buy_kb())


@dp.callback_query(lambda callback: callback.data == 'start_sell_button')
async def start_sell_button(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å', reply_markup=kb.sell_kb())


@dp.callback_query(lambda callback: callback.data == 'start_create_order_button')
async def start_create_order_button(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–∫—É–ø–∫—É',
                                     reply_markup=kb.create_order_kb())


@dp.callback_query(lambda callback: callback.data == 'start_autoposter_discord_button')
async def autoposter_discord_button(callback: CallbackQuery):
    await callback.message.edit_text('Soon..', reply_markup=kb.back_to_start_kb())


@dp.callback_query(lambda callback: callback.data == 'back_to_start')
async def back_to_start(callback: CallbackQuery):
    await callback.message.edit_text(LEXICON['start_message'], reply_markup=kb.start_kb())


@dp.message(lambda message: message.text == '/admin' and message.from_user.id in admin_ids)
async def admin(message: Message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.username}! üòä', reply_markup=admin_kb.menu_kb())


@dp.callback_query(lambda callback: callback.data.split('_')[-1] == 'virt')
async def handle_action_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    action_type = callback.data.split('_')[0]
    user_data[user_id] = {'action': action_type}

    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞—Ç—å"

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –≥–¥–µ —Ö–æ—Ç–∏—Ç–µ {action_text} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É.",
                                     reply_markup=kb.game_kb(action_type))


@dp.callback_query(lambda callback: callback.data.startswith('game_'))
async def game_callback_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data[user_id]['game'] = callback.data.split('_')[-1]
    action_type = user_data[user_id]['action']
    game = callback.data.split('_')[-1]
    user_data[user_id]['game'] = game
    if game == 'gta5':
        await callback.message.edit_text('—Ç–µ–ø–µ—Ä—å –ø–∏–∫–Ω–∏ –ø—Ä–æ–µ–∫—Ç', reply_markup=kb.projects_kb(action_type))
    else:
        await callback.message.edit_text("I'm sorry, –º–∞–ª—ã—à–∫–∞, –Ω–µ –≥–æ—Ç–æ–≤–æ –µ—â—ë",
                                         reply_markup=kb.back_to_start_kb())  # TODO: –¥–æ–¥–µ–ª–∞—Ç—å


@dp.callback_query(lambda callback: callback.data.startswith('back_to_games_'))
async def back_to_games_callback(callback: CallbackQuery):
    print(786543)
    user_id = callback.from_user.id
    action_type = user_data[user_id]['action']

    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞—Ç—å"

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ {action_text} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É.",
                                     reply_markup=kb.game_kb(action_type))


@dp.callback_query(
    lambda callback: callback.data in [f'project_{x}' for x in ['GTA5RP', 'Majestic', 'Radmir GTA5']])
async def handle_project_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    project_name = callback.data.split('_')[-1]
    action_type = user_data[user_id]['action']

    user_data[user_id]['project'] = project_name

    if project_name == 'GTA5RP':
        servers_for_project = GTA5RP_SERVERS
    elif project_name == 'Majestic':
        servers_for_project = MAJESTIC_GTA5_SERVERS
    elif project_name == 'Radmir GTA5':
        servers_for_project = RADMIR_GTA5_SERVERS
    else:
        await callback.message.edit_text("ü§ï –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
        await callback.answer()
        return

    action_text = "–ø–æ–∫—É–ø–∫–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞–∂–∏"

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç {project_name}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è {action_text} –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã:",
        reply_markup=kb.servers_kb(servers_for_project))


@dp.callback_query(lambda callback: callback.data == 'back_to_projects')
async def handle_main_menu_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    action_type = user_data[user_id]['action']

    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞—Ç—å"

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ {action_text} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É.",
        reply_markup=kb.projects_kb(action_type))


@dp.callback_query(lambda callback: callback.data.startswith('back_to_'))
async def back_to(callback: CallbackQuery):
    destination = callback.data.split('_')[-1]

    if destination == 'buy':
        await start_buy_button(callback)
    elif destination == 'sell':
        await start_sell_button(callback)
    elif destination == 'servers':
        user_id = callback.from_user.id
        project_name = user_data[user_id]['project']
        action_type = user_data[user_id]['action']

        if project_name == 'GTA5RP':
            servers_for_project = GTA5RP_SERVERS
        elif project_name == 'Majestic':
            servers_for_project = MAJESTIC_GTA5_SERVERS
        elif project_name == 'Radmir GTA5':
            servers_for_project = RADMIR_GTA5_SERVERS
        else:
            return await callback.message.edit_text("ü§ï –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")

        action_text = "–ø–æ–∫—É–ø–∫–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞–∂–∏"

        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç {project_name}. –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è {action_text} –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã:",
            reply_markup=kb.servers_kb(servers_for_project))


@dp.callback_query(lambda callback: callback.data.startswith('server_'))
async def handle_server_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    server_name = callback.data.split('_')[-1]
    user_data[user_id]['server'] = server_name
    action_type = user_data[user_id]['action']
    project_name = user_data[user_id]['project']

    action_text = "–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏" if action_type == 'buy' else "–ø—Ä–æ–¥–∞—Ç—å"

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç {project_name}, —Å–µ—Ä–≤–µ—Ä {server_name}. "
        f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ {action_text}:",
        reply_markup=kb.amount_kb())


@dp.callback_query(lambda callback: callback.data.startswith('amount_'))
async def handle_amount_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    amount_value = callback.data.split('_')[-1]

    if amount_value == 'custom':
        await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã:")
        await callback.message.delete()
    else:
        amount = int(amount_value)
        if amount < 500000 or amount > 1000000000000:
            await bot.send_message(user_id, "ü§ï –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 500,000")
            return await callback.answer()

        user_data[user_id]['amount'] = amount

        action_type = user_data[user_id]['action']
        project = user_data[user_id]['project']
        server = user_data[user_id]['server']
        price_per_million = PRICE_PER_MILLION_VIRTS[project][action_type.lower()]
        cost = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000))

        if action_type == 'buy':
            action_text = "–ö—É–ø–∏—Ç—å"
        elif action_type == 'sell':
            action_text = "–ü—Ä–æ–¥–∞—Ç—å"
        else:
            action_text = ""

        confirm_text = (f"–í–∞—à –∑–∞–∫–∞–∑:\n"
                        f"‚îú –û–ø–µ—Ä–∞—Ü–∏—è: {action_text}\n"
                        f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n"
                        f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n"
                        f"‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤: {'{:,}'.format(amount)}\n\n"
                        f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {'{:,}'.format(cost)} —Ä—É–±.\n\n"
                        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?")
        await callback.message.edit_text(confirm_text, reply_markup=kb.confirmation_of_creation_kb())

    await callback.answer()


@dp.callback_query(
    lambda callback: callback.data.startswith(
        'confirmation_of_creation_') and callback.from_user.id not in active_chats)
async def handle_confirm_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data.split('_')[-1]

    if action == 'confirm':
        action = user_data[user_id]['action']
        project = user_data[user_id]['project']
        server = user_data[user_id]['server']
        amount = user_data[user_id]['amount']
        username = callback.from_user.username

        order_id = add_order(user_id, username, action, project, server, amount)

        await callback.message.edit_text("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

        matched_order = database.match_orders(user_id, action, project, server, amount)
        if matched_order:
            matched_order_id, other_user_id = matched_order

            buyer_id = user_id if action == 'buy' else other_user_id
            seller_id = user_id if action == 'sell' else other_user_id
            buyer_order_id = order_id if action == 'buy' else matched_order_id
            seller_order_id = order_id if action == 'sell' else matched_order_id
            matched_orders_id = create_matched_order(buyer_id, buyer_order_id, seller_id, seller_order_id)

            await notify_users_of_chat(matched_orders_id, buyer_id, seller_id, order_id)

            database.update_order_status(order_id, 'matched')
            database.update_order_status(matched_order_id, 'matched')

        del user_data[user_id]

    else:
        del user_data[user_id]
        await callback.message.edit_text("üö´ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")

    await callback.answer()


async def send_order_info(matched_orders_id: int | str, buyer_id: int | str, seller_id: int | str, order_id: int | str):
    order = get_order(order_id=order_id)

    project = order[4]
    server = order[5]
    amount = int(order[6])

    buyer_message = "‚ÄºÔ∏è –Ø –Ω–∞—à–µ–ª –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É. –ù–∞—á–∏–Ω–∞—é –≤–∞—à —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º.\n\n"
    seller_message = "‚ÄºÔ∏è –Ø –Ω–∞—à–µ–ª –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É. –ù–∞—á–∏–Ω–∞—é –≤–∞—à —á–∞—Ç —Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º.\n\n"

    order_ifo = ("{}<b><u>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å–¥–µ–ª–∫–µ:</u></b> \n\n"
                 f"‚îú ID —Å–¥–µ–ª–∫–∏: <b>{str(matched_orders_id)}</b>\n"
                 "‚îú –û–ø–µ—Ä–∞—Ü–∏—è: <b>{}</b>\n"
                 f"‚îú –ü—Ä–æ–µ–∫—Ç: <b>{project}</b>\n"
                 f"‚îú –°–µ—Ä–≤–µ—Ä: <b>{server}</b>\n"
                 f"‚îî –ö–æ–ª-–≤–æ –≤–∏—Ä—Ç–æ–≤: <code>{str(amount)}</code>\n\n"
                 "<b><u>–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞</u>: {} —Ä—É–±</b>")

    price_per_million = PRICE_PER_MILLION_VIRTS[project]["buy"]
    cost = str(math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000)))

    await bot.send_message(buyer_id, order_ifo.format(buyer_message, '–ü–æ–∫—É–ø–∫–∞', cost), parse_mode='HTML')

    price_per_million = PRICE_PER_MILLION_VIRTS[project]["sell"]
    cost = str(math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) * (price_per_million / 1000000)))

    await bot.send_message(seller_id, order_ifo.format(seller_message, '–ü—Ä–æ–¥–∞–∂–∞', cost), parse_mode='HTML')


async def notify_users_of_chat(matched_orders_id: int | str, buyer_id: int | str, seller_id: int | str,
                               order_id: int | str):
    chat_id = f"{buyer_id}_{seller_id}"
    active_chats[buyer_id] = chat_id
    active_chats[seller_id] = chat_id
    cancel_requests[chat_id] = {buyer_id: False, seller_id: False}
    action_message = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await send_order_info(matched_orders_id, buyer_id, seller_id, order_id)
    message_buyer = await bot.send_message(buyer_id, action_message,
                                           reply_markup=kb.confirmation_of_deal_buyer_kb(seller_id, matched_orders_id))
    message_seller = await bot.send_message(seller_id, action_message,
                                            reply_markup=kb.confirmation_of_deal_seller_kb(buyer_id, matched_orders_id))

    cancel_requests[chat_id]['buyer_message_id'] = message_buyer.message_id
    cancel_requests[chat_id]['seller_message_id'] = message_seller.message_id


@dp.callback_query(lambda callback: callback.data.startswith('report_'))
async def report_callback(callback: CallbackQuery):
    if user_states[callback.from_user.id] == 'waiting_for_problem_description':
        return await callback.answer()
    _, offender_id, order_id = callback.data.split('_')

    user_data.setdefault(callback.from_user.id, {})
    user_data[callback.from_user.id]['complaint'] = {}
    user_data[callback.from_user.id]['complaint']['offender_id'] = offender_id
    user_data[callback.from_user.id]['complaint']['order_id'] = order_id
    user_states[callback.from_user.id] = 'waiting_for_problem_description'

    await callback.message.answer('üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:')


@dp.callback_query(lambda callback: callback.data.startswith('confirmation_of_deal_'))
async def handle_chat_action_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    action = callback.data.split('_')[-1]
    chat_id = active_chats[user_id]
    buyer_id, seller_id = map(int, chat_id.split('_'))
    other_user_id = buyer_id if user_id == seller_id else seller_id

    if action == 'cancel':
        cancel_requests[chat_id][user_id] = True

        await bot.delete_message(user_id, callback.message.message_id)

        if user_id == seller_id:
            del active_chats[buyer_id]
            del active_chats[seller_id]

            await bot.send_message(buyer_id, "üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º.")
            await bot.send_message(seller_id, "üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

            await bot.delete_message(buyer_id, cancel_requests[chat_id]['buyer_message_id'])
            del cancel_requests[chat_id]

            try:
                update_order_status(buyer_id, 'deleted')
                update_order_status(seller_id, 'deleted')
            except sqlite3.Error as e:
                print(f"Error updating order status to 'deleted': {e}")

        else:
            await bot.send_message(user_id, "‚ÄºÔ∏è –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞.")
            await bot.send_message(other_user_id, "‚ÄºÔ∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å "
                                                  "—Å–¥–µ–ª–∫—É, –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É'.")

            if cancel_requests[chat_id][other_user_id]:
                del active_chats[buyer_id]
                del active_chats[seller_id]

                await bot.send_message(buyer_id, "üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                await bot.send_message(seller_id, "üö´ –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

                await bot.delete_message(seller_id, cancel_requests[chat_id]['seller_message_id'])
                del cancel_requests[chat_id]

                try:
                    update_order_status(buyer_id, 'deleted')
                    update_order_status(seller_id, 'deleted')
                except sqlite3.Error as e:
                    print(f"Error updating order status to 'deleted': {e}")

    elif action == 'confirm':
        if user_id == buyer_id:

            cancel_requests[chat_id][user_id] = True

            await bot.delete_message(buyer_id, callback.message.message_id)
            await bot.delete_message(seller_id, cancel_requests[chat_id]['seller_message_id'])

            await bot.send_message(buyer_id, "‚úÖ –°–¥–µ–ª–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –≤–∞–º–∏.")
            await bot.send_message(seller_id, "‚úÖ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–¥–µ–ª–∫—É. –°–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

            try:
                update_order_status(buyer_id, 'confirmed')
                update_order_status(seller_id, 'confirmed')
            except sqlite3.Error as e:
                print(f"Error updating order status to 'confirmed': {e}")

            del active_chats[buyer_id]
            del active_chats[seller_id]
            del cancel_requests[chat_id]


@dp.message(
    lambda message: message.from_user.id in active_chats and message.text not in ['/support',
                                                                                  '/report'] and user_states.get(
        message.from_user.id) not in ['waiting_for_user_id', 'waiting_for_order_id', 'waiting_for_problem_description']
)
async def handle_chat_message(message: Message):
    user_id = message.from_user.id
    chat_id = active_chats[user_id]
    buyer_id, seller_id = map(int, chat_id.split('_'))
    recipient_id = buyer_id if user_id == seller_id else seller_id

    conn = sqlite3.connect('database/database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id FROM users WHERE user_id=?", (user_id,))
    bot_user_id = cursor.fetchone()[0]
    conn.close()

    save_chat_message(chat_id, user_id, recipient_id, message.text)

    await bot.send_message(recipient_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ID {bot_user_id}: {message.text}")


@dp.message(Command('account'))
async def account_info(message: Message):
    user_id = message.from_user.id
    user_db_data = get_user(user_id)

    if user_db_data:
        user_id, tg_id, username, phone_number, ballance, created_at = user_db_data
        account_info_text = f"–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n\n" \
                            f"‚îú –ë–∞–ª–∞–Ω—Å: {ballance}\n" \
                            f"‚îú User ID: {user_id}\n" \
                            f"‚îú Username: {username}\n" \
                            f"‚îú Telegram ID: {tg_id}\n" \
                            f"‚îî –î–∞—Ç–∞ –∑–∞—Ö–æ–¥–∞ –≤ –±–æ—Ç–∞: {created_at}\n"

        await message.answer(account_info_text, reply_markup=kb.account_kb())

    else:
        await message.answer("‚ùî –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ")


@dp.callback_query(lambda callback: callback.data == 'top_up_balance' and callback.from_user.id not in active_chats)
async def process_top_up_balance(callback_query: CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...")


@dp.callback_query(lambda query: query.data == 'my_orders')
async def process_my_orders(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    orders = get_orders_by_user_id(user_id)

    if orders:
        orders_text = "–í–∞—à–∏ –æ—Ä–¥–µ—Ä–∞:\n\n"
        for order in orders:
            order_id, _, action, project, server, amount, status, created_at = order
            orders_text += f"‚îú ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n" \
                           f"‚îú –î–µ–π—Å—Ç–≤–∏–µ: {action}\n" \
                           f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n" \
                           f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n" \
                           f"‚îú –°—É–º–º–∞: {amount}\n" \
                           f"‚îú –°—Ç–∞—Ç—É—Å: {status}\n" \
                           f"‚îî –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"
    else:
        orders_text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤."

    await callback_query.answer()
    await callback_query.message.answer(orders_text)


@dp.message(Command('report'))
async def report_command(message: Message):
    await message.answer(LEXICON['report_message'], reply_markup=kb.report_kb())


@dp.callback_query(lambda c: c.data == 'write_ticket')
async def process_write_ticket_callback(callback_query: CallbackQuery):
    await callback_query.answer()

    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∏–∫–µ—Ç:")

    user_states[callback_query.from_user.id] = 'waiting_for_user_id'
    user_data.setdefault(callback_query.from_user.id, {})
    user_data[callback_query.from_user.id]['complaint'] = {}


@dp.message(lambda message: user_states.get(message.from_user.id) == 'waiting_for_user_id')
async def process_user_id(message: Message):
    try:
        user_id = int(message.text.strip())
    except ValueError:
        return await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è .")  # –ö–∞–∫ —è –ø—Ä–æ—Å–∏–ª —Å–¥–µ–ª–∞—Ç—å –±–µ–∑ user id, —á–∏—Å—Ç–æ —Å –∞–π–¥–∏ –æ—Ä–¥–µ—Ä–∞

    offender_id = get_user_id_by_id(user_id)

    if not offender_id:
        return await message.answer("‚ùî –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º ID, –º–æ–∂–µ—Ç –≤—ã –æ—à–∏–±–ª–∏—Å—å?")

    user_data[message.from_user.id]['complaint']['offender_id'] = offender_id
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ ID —Å–¥–µ–ª–∫–∏ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º), –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∏–∫–µ—Ç:")

    user_states[message.from_user.id] = 'waiting_for_order_id'


@dp.message(lambda message: user_states.get(message.from_user.id) == 'waiting_for_order_id')
async def process_order_id(message: Message):
    try:
        order_id = int(message.text.strip())
    except ValueError:
        return await message.answer("‚ùî –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–¥–µ–ª–∫—É —Å —Ç–∞–∫–∏–º ID, –º–æ–∂–µ—Ç –≤—ã –æ—à–∏–±–ª–∏—Å—å?")

    if not check_matched_order(order_id, message.from_user.id):
        return await message.answer(
            "–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∫–∏ —Å –¥–∞–Ω–Ω—ã–º ID, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")  # TODO: –∫–Ω–æ–ø–∫—É –≤—ã—Ö–æ–¥–∞ –æ—Ç—Å—é–¥–∞

    user_data[message.from_user.id]['complaint']['order_id'] = order_id
    user_states[message.from_user.id] = 'waiting_for_problem_description'

    await message.answer("–¢–µ–ø–µ—Ä—å –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑–ª–æ–∂–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã:")


@dp.message(lambda message: user_states.get(message.from_user.id) == 'waiting_for_problem_description')
async def process_problem_description(message: Message):
    complaint_text = message.text
    user_data[message.from_user.id]['complaint']['complaint_text'] = complaint_text

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.send_report_kb())


@dp.callback_query(lambda c: c.data in ['send_ticket', 'cancel_ticket'])
async def process_ticket_action(callback_query: CallbackQuery):
    await callback_query.answer()
    if callback_query.data == 'send_ticket':
        try:
            order_id = user_data[callback_query.from_user.id]['complaint']['order_id']
            complainer_id = callback_query.from_user.id
            offender_id = user_data[callback_query.from_user.id]['complaint']['offender_id']
            complaint = user_data[callback_query.from_user.id]['complaint']['complaint_text']
            create_report(order_id, complainer_id, offender_id, complaint)

            await callback_query.message.edit_text(
                "‚úÖ –¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            user_states[callback_query.from_user.id] = {}

            await bot.send_message(admin_ids[0], '‚ÄºÔ∏è –ü–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç\n/admin')
            await bot.send_message(922787101, '‚ÄºÔ∏è –ü–æ—Å—Ç—É–ø–∏–ª —Ä–µ–ø–æ—Ä—Ç\n/admin')

        except Exception as e:
            await callback_query.message.answer("‚ùî –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–ø—Ä—è–º—É—é")
            print(e, datetime.datetime.now().time(), sep='\n')

    elif callback_query.data == 'cancel_ticket':
        user_data[callback_query.from_user.id]['complaint'] = {}
        await callback_query.message.edit_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞.")


@dp.message(Command('help'))
async def help_command(message: Message):
    help_text = """
    –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–± –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏.

    –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
    /help - –í—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    /report - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∂–∞–ª–æ–±—ã –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å —Ç–∏–∫–µ—Ç" –≤ –º–µ–Ω—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∂–∞–ª–æ–±—ã.
    2. –°–ª–µ–¥—É–π—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è–º –±–æ—Ç–∞ –¥–ª—è –≤–≤–æ–¥–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–∫–∞–∑–∞.
    3. –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –æ–±–æ–∏—Ö ID –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞.

    –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
    """
    await message.answer(help_text)


@dp.message(Command('myorders'))
async def my_orders_command(message: Message):
    user_id = message.from_user.id
    orders = get_orders_by_user_id(user_id)

    if orders:
        orders_text = "–í–∞—à–∏ –æ—Ä–¥–µ—Ä–∞:\n\n"
        for order in orders:
            order_id, _, action, project, server, amount, status, created_at = order
            orders_text += f"‚îú ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n" \
                           f"‚îú –î–µ–π—Å—Ç–≤–∏–µ: {action}\n" \
                           f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n" \
                           f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n" \
                           f"‚îú –°—É–º–º–∞: {amount}\n" \
                           f"‚îú –°—Ç–∞—Ç—É—Å: {status}\n" \
                           f"‚îî–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at}\n\n"

        await message.answer(orders_text)
    else:
        await message.answer("‚ùî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ä–¥–µ—Ä–æ–≤.")


@dp.message(Command('support'))
async def support_command(message: Message):
    support_info = "–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:\n\n" \
                   "Email: support@example.com\n" \
                   "–¢–µ–ª–µ—Ñ–æ–Ω: +1234567890\n" \
                   "Telegram: @support_username\n"

    await message.answer(support_info, reply_markup=kb.support_kb())


@dp.callback_query(lambda callback: callback.data == 'contact_support')
async def contact_support_handler(callback: CallbackQuery):
    await callback.message.edit_text('–ù–∞–ø–∏—à–∏ –º–Ω–µ, —è –æ–±—ä—è—Å–Ω—é @Miros49')


@dp.message(Command('info'))
async def info_command(message: Message):
    bot_info = "–≠—Ç–æ –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –∏ –æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.\n" \
               "–û–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞–º–∏ –∏ —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."

    await message.answer(bot_info)


# @dp.callback_query(lambda callback: callback.data == '')
# async def orders_command(message: Message):
#     user_data[message.from_user.id]: dict = {}
#     user_data[message.from_user.id]['watched_orders']: list = []
#
#     await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç", reply_markup=kb.projects_kb())
#
#
# @dp.callback_query(
#     lambda callback: callback.data in [f'project_{x}' for x in ['GTA5RP', 'Majestic', 'Radmir GTA5']])
# async def handle_project_orders_callback(query: CallbackQuery, callback_data: dict):
#     user_id = query.from_user.id
#     project_name: str = callback_data['name']
#
#     user_data[user_id] = {}
#     user_data[user_id]['project'] = project_name.split('_')[0]
#
#     if project_name == 'GTA5RP_orders':
#         servers_for_project = GTA5RP_SERVERS
#     elif project_name == 'Majestic_orders':
#         servers_for_project = MAJESTIC_GTA5_SERVERS
#     elif project_name == 'Radmir GTA5_orders':
#         servers_for_project = RADMIR_GTA5_SERVERS
#     else:
#         return await query.message.edit_text("‚ùî –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç")
#
#     await query.message.edit_text(
#         f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç {project_name.split('_')[0]}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä",
#         reply_markup=kb.orders_servers_kb(servers_for_project))
#
#
# @dp.callback_query(lambda callback: callback.data == 'back_to_projects')
# async def handle_orders_back_to_projects_callback(callback: CallbackQuery):
#     await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç", reply_markup=kb.orders_project_kb())
#
#
# @dp.callback_query(lambda callback: callback.data.startswith('orders_servers'))
# async def handle_orders_server_callback(callback: CallbackQuery):
#     user_id = callback.from_user.id
#     server = callback.data.split('_')[-1]
#     project = user_data[user_id]['project']
#
#     orders = get_pending_sell_orders(user_id, project, server)
#
#     if not orders:
#         return await callback.message.edit_text(
#             "‚ùî –Ø –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –æ—Ä–¥–µ—Ä —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, "
#             "–Ω–∞–∂–∞–≤ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∫–Ω–æ–ø–∫—É - '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É' ")
#
#     await callback.message.delete()
#
#     watched_orders = []
#     orders_num = 0
#     for order in orders:
#         order_id, user_id, username, action, project, server, amount, status, created_at = order
#
#         price_per_million = PRICE_PER_MILLION_VIRTS[project]["buy"]
#         price = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) *
#         (price_per_million / 1000000))
#
#         # orders_text = f"‚îú ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n\n" \    # TODO: –¥–æ–¥–µ–ª–∞—Ç—å
#         orders_text = f"‚îú  –û–ø–µ—Ä–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–∂–∞\n" \
#                       f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n" \
#                       f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n" \
#                       f"‚îú –ö–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã: {math.ceil(amount)}\n" \
#                       f"‚îî –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {convert_datetime(created_at)}\n\n" \
#                       f"–¶–µ–Ω–∞: {price}—Ä—É–±"
#
#         kb = InlineKeyboardMarkup(row_width=1)
#         kb.add(InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å!", callback_data=f'buy_order_{str(order_id)}'))
#
#         watched_orders.append(order_id)
#
#         if orders_num == 4:
#             kb.add(InlineKeyboardButton(
#                 text='‚è¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë',
#                 callback_data=f'watch-other_{project}_{server}_{"-".join([str(el) for el in watched_orders])}')
#             )
#             return await callback.message.answer(orders_text, reply_markup=kb)
#
#         await callback.message.answer(orders_text, reply_markup=kb)
#
#         orders_num += 1
#
#
# @dp.callback_query(lambda query: query.data.startswith('watch-other_'))
# async def watch_other_callback(query: CallbackQuery):
#     user_id = query.from_user.id
#     _, project, server, watched_orders = query.data.split('_')
#     watched_orders = list(map(int, watched_orders.split('-')))
#     print(watched_orders)
#
#     kb = InlineKeyboardMarkup(row_width=1)
#     kb.add(InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å!", callback_data=f'buy_order_{str(watched_orders[-1])}'))
#     await query.message.edit_text(query.message.text, reply_markup=kb)
#
#     orders = get_pending_sell_orders(user_id, project, server)
#
#     if not orders:
#         return await query.message.edit_text("–í—ã—à–µ —è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –≤—Å–µ –æ—Ä–¥–µ—Ä–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
#
#     orders_num = 0
#     for order in orders:
#         order_id, user_id, username, action, project, server, amount, status, created_at = order
#
#         if order_id in watched_orders:
#             continue
#
#         price_per_million = PRICE_PER_MILLION_VIRTS[project]["buy"]
#         price = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) *
#         (price_per_million / 1000000))
#
#         orders_text = f"‚îú ID –æ—Ä–¥–µ—Ä–∞: {order_id}\n\n" \
#                       f"‚îú –û–ø–µ—Ä–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–∂–∞\n" \
#                       f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n" \
#                       f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n" \
#                       f"‚îú –ö–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã: {math.ceil(amount)}\n" \
#                       f"‚îî –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {convert_datetime(created_at)}\n\n" \
#                       f"–¶–µ–Ω–∞: {price}—Ä—É–±"
#
#         kb = InlineKeyboardMarkup(row_width=1)
#         kb.add(InlineKeyboardButton(text="‚úÖ –ö—É–ø–∏—Ç—å!", callback_data=f'buy_order_{str(order_id)}'))
#
#         if orders_num == 4:
#             kb.add(InlineKeyboardButton(
#                 text='‚è¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë',
#                 callback_data=f'watch_other_{project}_{server}_{"-".join(user_data[user_id]["watched_orders"])}')
#             )
#             return await query.message.answer(orders_text, reply_markup=kb)
#
#         await query.message.answer(orders_text, reply_markup=kb)
#
#         watched_orders.append(order_id)
#         orders_num += 1
#
#
# @dp.callback_query(lambda query: query.data.startswith('buy_order_'),
#                    lambda query: query.from_user.id not in active_chats)
# async def buy_order(query: CallbackQuery):
#     kb = InlineKeyboardMarkup(row_width=1)
#     kb.add(InlineKeyboardButton(text="ü§ù –î–∞, –Ω–∞—á–∞—Ç—å —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º",
#                                 callback_data=f'confirmation_of_buying_{str(query.data.split("_")[-1])}'))
#     await query.message.edit_text(query.message.text + '\n\nü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã?', reply_markup=kb)


@dp.callback_query(lambda query: query.data.startswith('confirmation_of_buying_'),
                   lambda query: query.from_user.id not in active_chats)
async def confirmation_of_buying(callback: CallbackQuery):
    order_id = callback.data.split('_')[-1]
    buyer_id = callback.from_user.id
    seller_id = get_user_id_by_order(order_id)
    matched_orders_id = create_matched_order(buyer_id, 0, seller_id, int(order_id))

    await callback.message.edit_text(callback.message.text[:-13] + '‚úÖ –ù–∞—á–∞–ª—Å—è —á–∞—Ç —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º')
    await notify_users_of_chat(matched_orders_id, buyer_id, seller_id, order_id)


@dp.callback_query(
    lambda callback: callback.data == 'admin_reports' and callback.from_user.id in admin_ids)
async def admin_reports(callback: CallbackQuery):
    complaints = get_open_reports()
    if not complaints:
        return await callback.message.edit_text("‚úÖ –ù–µ—Ç –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∂–∞–ª–æ–±")
    await callback.message.delete()

    for complaint in complaints:
        _, order_id, complainer_id, offender_id, complaint_text = complaint

        complainer = get_user(complainer_id)
        offender = get_user(offender_id)

        complainer_username = f'@{complainer[2]}' if complainer[2] else '<b>–Ω–µ—Ç —Ç–µ–≥–∞</b>'
        offender_username = f'@{offender[2]}' if offender[2] else '<b>–Ω–µ—Ç —Ç–µ–≥–∞</b>'

        text = (f'üìã <i><u>–†–µ–ø–æ—Ä—Ç –ø–æ –∑–∞–∫–∞–∑—É: {str(order_id)}</u></i>\n\n'
                f'üë§ –ê–≤—Ç–æ—Ä: {complainer_username} (<code>{complainer_id}</code>)\n'
                f'üí¢ –ñ–∞–ª—É–µ—Ç—Å—è –Ω–∞: {offender_username} (<code>{offender_id}</code>)\n\n'
                f'<b>üìù –ü—Ä–∏—á–∏–Ω–∞:</b>\n{complaint_text}')

        await callback.message.answer(text, parse_mode='HTML')
        # TODO: –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –æ—Ç—Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Ä–µ–ø–æ—Ä—Ç


# @dp.message(
#     lambda message: message.from_user.id in user_data and 'amount' not in user_data[
#         message.from_user.id] and '/orders' != message.text and message.from_user.id not in active_chats)
# async def handle_custom_amount(message: Message):
#     user_id = message.from_user.id
#     try:
#         amount = int(message.text.replace(".", "").replace(",", ""))
#         if amount < 500000 or amount > 1000000000000:
#             await message.answer("‚ùî –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã: 500.000 ")
#             return
#
#         user_data[user_id]['amount'] = amount
#
#         action_type = user_data[user_id]['action']
#         project = user_data[user_id]['project']
#         server = user_data[user_id]['server']
#
#         price_per_million = PRICE_PER_MILLION_VIRTS[project][action_type.lower()]
#         price = math.ceil((amount // 1000000) * price_per_million + (amount % 1000000) *
#         (price_per_million / 1000000))
#
#         if action_type == 'buy':
#             action_text = "–ö—É–ø–∏—Ç—å"
#         elif action_type == 'sell':
#             action_text = "–ü—Ä–æ–¥–∞—Ç—å"
#         else:
#             action_text = ""
#
#         confirm_text = (f"–í–∞—à –∑–∞–∫–∞–∑:\n"
#                         f"‚îú –û–ø–µ—Ä–∞—Ü–∏—è: {action_text}\n"
#                         f"‚îú –ü—Ä–æ–µ–∫—Ç: {project}\n"
#                         f"‚îú –°–µ—Ä–≤–µ—Ä: {server}\n"
#                         f"‚îî –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ä—Ç–æ–≤: {'{:,}'.format(amount)}\n\n"
#                         f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {'{:,}'.format(price)} —Ä—É–±.\n\n"
#                         f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?")
#
#         await message.answer(confirm_text, reply_markup=kb.confirmation_of_creation_kb())
#     except ValueError:
#         await message.answer("‚ùî –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–∏—Ö —á–∏—Å–µ–ª, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


def todo() -> None:
    # TODO: –ø–æ—á–∏–Ω–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç—ã (–∞–¥–º–∏–Ω—É –≤—ã—Å—ã–ª–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞ 1 –∏ —Ç–æ—Ç –∂–µ Id –º–æ–≥—É—Ç –±—ã—Ç—å 2 —Ä–∞–∑–Ω—ã–µ –∂–∞–ª–æ–±—ã)

    # TODO: –ü–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ —ç—Ç–æ –µ—Å—Ç—å) –¥–æ–±–∞–≤—å –≤—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. 2 –∫–Ω–æ–ø–∫–∏ -
    #       GTA5 –∏ SAMP, CRMP, MTA. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±—É–¥–µ—Ç –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞—Ç—å –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã.

    # TODO: (–ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ /orders)
    #       /ordersbiz - –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞ => –≤—ã–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞
    #       /ordersacc - –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞, —Å–µ—Ä–≤–µ—Ä–∞ => –≤—ã–¥–∞–µ—Ç –æ—Ä–¥–µ—Ä–∞

    # TODO: –ò—Å–ø—Ä–∞–≤–∏—Ç—å user id. –ù–∞ –æ–¥–∏–Ω –¢–ì –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç 1 user id.

    # TODO: /report
    #       ID –∑–∞–∫–∞–∑–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã –ø–æ–¥–∞–µ—Ç—Å—è –∂–∞–ª–æ–±–∞ - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –æ—Ä–¥–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç.
    #       (—ç—Ç–æ –Ω–µ ID order –Ω–µ –ø—É—Ç–∞–π!, —É –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞ —Å–≤–æ–π –æ—Ä–¥–µ—Ä id)
    #       –†–µ–ø–æ—Ä—Ç –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫ - –í–≤–æ–¥ ID –∑–∞–∫–∞–∑–∞, –≤–≤–æ–¥ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    #       (–±–µ–∑ user id, –ø—Ä–∏ –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±—É–¥–µ—Ç –±—Ä–∞—Ç—å—Å—è user id –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∑–∞–∫–∞–∑–µ)
    #       –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–¥–∞—Ç—å —Ä–µ–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–≤–æ–π –∑–∞–∫–∞–∑ –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω –ø—Ä–∏–Ω–∏–º–∞–ª –∏–ª–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —É—á–∞—Å—Ç–∏–µ.

    # TODO: /admin
    #       –í–º–µ—Å—Ç–µ —Å username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–≤–æ–¥–∏ user id –æ–±–æ–∏—Ö, –≤—ã–≤–æ–¥–∏ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ø–æ—Ä—Ç–∞ –∏ –¥–æ–±–∞–≤—å –∫–Ω–æ–ø–∫–∏:
    #       –û—Ç–≤–µ—Ç–∏—Ç—å, –∑–∞–∫—Ä—ã—Ç—å, –∑–∞–±–∞–Ω–∏—Ç—å 1–¥,7–¥,30–¥, –Ω–∞–≤—Å–µ–≥–¥–∞,
    #       –ö–Ω–æ–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –ø–µ—Ä–µ–ø–∏—Å–∫–µ (—Å–¥–µ–ª–∞–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–∏—Ç—å –∏–∑ –Ω–µ–µ),
    #       –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–≤–µ—Ç—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏. + –ö–Ω–æ–ø–∫–∏ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ–π.
    #       –° –∏–Ω—Ñ–æ–π –æ–± —Å–∞–º–æ–º –æ—Ä–¥–µ—Ä–µ, –æ–± –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –ø–µ—Ä–µ–ø–∏—Å–∫–∞.

    # TODO: support —É–≤–∏–¥–∏—à—å –≤ –õ–° (–ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å –ì–ë)

    # TODO: –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - /start /menu (–í–ê–ñ–ù–û! –¶–ï–ù–ê –î–õ–Ø –ü–û–ö–£–ü–ö–ò –ë–£–î–ï–¢ –í–´–®–ï –¶–ï–ù–´ –î–õ–Ø –ü–†–û–î–ê–ñ–ò –ù–ê 30%)
    #       –í—ã–≤–æ–¥–∏—Ç—Å—è –æ–¥–Ω–æ –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ-–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ - –ö—É–ø–∏—Ç—å –ü—Ä–æ–¥–∞—Ç—å –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É
    #       (–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä Discord, –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
    #       –ö—É–ø–∏—Ç—å - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏ (/orders /ordersbiz /ordersacc) –í—ã–±–æ—Ä –ø–æ–∫—É–ø–∫–∏ —á–µ–≥–æ
    #       –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞, –ë–∏–∑–Ω–µ—Å, –ê–∫–∫–∞—É–Ω—Ç. –ò –¥–∞–ª–µ–µ –ø–æ –Ω–∞–∫–∞—Ç–∞–Ω–Ω–æ–π
    #       –ü—Ä–æ–¥–∞—Ç—å - —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞. –í—ã–±–æ—Ä –ø—Ä–æ–¥–∞–∂–∏ —á–µ–≥–æ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞, –ë–∏–∑–Ω–µ—Å, –ê–∫–∫–∞—É–Ω—Ç.
    #       –ë–∏–∑–Ω–µ—Å - –≤–≤–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ), —Ü–µ–Ω–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è), –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    #       –ê–∫–∫–∞—É–Ω—Ç - –≤–≤–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞, —Å–µ—Ä–≤–µ—Ä–∞, –æ–ø–∏—Å–∞–Ω–∏–µ(–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ),
    #       —Ü–µ–Ω–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è), –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.
    #       –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ - –≤–≤–æ–¥ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã, –ø—Ä–æ–µ–∫—Ç–∞, —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ–ª-–≤–æ –≤–∞–ª—é—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.

    # TODO: –ë–∞–ª–∞–Ω—Å, –ø–ª–∞—Ç–µ–∂–∫–∞, fsm –∏ —Ç–ø

    pass


async def main():
    database.init_db()

    await bot.delete_webhook(drop_pending_updates=True)
    polling_task = asyncio.create_task(dp.start_polling(bot))

    await asyncio.gather(polling_task)


if __name__ == '__main__':
    asyncio.run(main())
